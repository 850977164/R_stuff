# ??FindMarkers()
# cluster1.markers <- FindMarkers(G48E2L1, ident.1 = 1, min.pct = 0.25)
# head(cluster1.markers, n=5)
G48E2L1.markers <- FindAllMarkers(G48E2L1, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
# G48E2L1.markers <- FindAllMarkers(G48E2L1, min.pct = 0.25, logfc.threshold = 0.25)
G48E2L1.markers %>% group_by(cluster) %>% top_n(n=2, wt = avg_logFC)
# G48E2L1.markers <- FindAllMarkers(G48E2L1, min.pct = 0.25, logfc.threshold = 0.25)
top10 <- G48E2L1.markers %>% group_by(cluster) %>% top_n(n=10, wt = avg_logFC)
DoHeatmap(object = G48E2L1,features = top10$gene) + NoLegend()
# annotation gene marker
library(SingleR)
# annotation gene marker
devtools::install_github('dviraran/SingleR')
source('~/.active-rstudio-document', echo=TRUE)
# annotation gene marker
devtools::install_github('dviraran/SingleR')
devtools::install_github('dviraran/SingleR')
library(SingleR)
devtools::install_github('dviraran/SingleR')
rowRanges(sce)
sce <- scater::calculateQCMetrics(sce)
rowRanges(sce)
head(USArrests,3)
head(USArrests,3)
head(USArrests$Murder)
USArrests[,'Murder']
USArrests[,1]
install.packages("FactoMineR")
library("FactoMineR")
library(factoextra)
install.packages("factoextra")
library(factoextra)
data(decathlon2)
head(decathlo2)
head(decathlon2)
head(decathlon2)
decathlon2
decathlon2.active <- decathlon2[1:23, 1:10]
head(decathlon2.active[,1:6],4)
res.pca <- PCA(decathlon2.active,graph = TRUE)
res.pca <- PCA(decathlon2.active,graph = FALSE)
res.pca <- PCA(decathlon2.active)
res.pca <- PCA(decathlon2.active, graph = FALSE)
res.pca
print(res.pca)
eig.val <- get_eigenvalue(res.pca)
eig.val
summary(eig.val)
sum(eig.val)
sum(eig.val$eigenvalue)
sum(eig.val$eigenvalue)
colSums(eig.val)
fviz_eig(res.pca,addlabels = TRUE, ylim = c(0,50))
var <- get_pca_var(res.pca)
var
head(var$coord)
# Cos2: quality on the factore map
head(var$cos2)
# Contributions to the principal components
head(var$contrib)
head(var$coord, 4)
fviz_pca_var(res.pca, col.var = "black")
head(var$cos2,4)
library(Seurat)
library(dplyr)
real_10x_data = Read10X(data.dir = "G:\\projects\\R_stuff\\10xGenomics\\example_G48E2L1\\filtered_feature_bc_matrix")
G48E2L1 <-CreateSeuratObject(counts = real_10x_data,
project = "G48E2L1",
min.cells = 3,min.features = 200)
G48E2L1
G48E2L1@meta.data
G48E2L1.data
G48E2L1.data[c("CD3D","TCL1A"),1:30]
real_10x_data.data
real_10x_data
real_10x_data[,"AAACCTGAGGAATGGA"]
real_10x_data[,"ACGCAGCGTAAAGTCA"]
real_10x_data["TMEM69","ACGCAGCGTAAAGTCA"]
real_10x_data["TRA*","ACGCAGCGTAAAGTCA"]
real_10x_data["TRA","ACGCAGCGTAAAGTCA"]
real_10x_data[,"ACGCAGCGTAAAGTCA"]
real_10x_data["TRBV7-2","ACGCAGCGTAAAGTCA"]
real_10x_data[c("TRBV7-2","TRAV8-6"),"ACGCAGCGTAAAGTCA"]
real_10x_data[c("TRBV7-2","TRAV8-6","TRAV21","TRBV9"),"ACGCAGCGTAAAGTCA"]
sum(real_10x_data[,"ACGCAGCGTAAAGTCA"])
sum(real_10x_data[c("TRBV7-2","TRAV8-6","TRAV21","TRBV9"),"ACGCAGCGTAAAGTCA"])
sum(real_10x_data)
rowsum(real_10x_data)
rowSums(real_10x_data)
rowSums(real_10x_data[,])
sum(real_10x_data[,"GGATTACGTAGGACAC"])
real_10x_data[c("TRBV7-8","TRAV26-1"),"GGATTACGTAGGACAC"]
real_10x_data[c("TRBV7-8","TRAV26-1","TRBV4-1"),"GGATTACGTAGGACAC"]
real_10x_data[c("TRBV7-8","TRAV8-6","TRAV21","TRBV9"),"ACGCAGCGTAAAGTCA"]
real_10x_data[c("TRBV7-8","TRAV8-6","TRAV21","TRBV9"),"ACGCAGCGTAAAGTCA"]
real_10x_data[c("TRBV7-2","TRAV8-6","TRAV21","TRBV9"),"ACGCAGCGTAAAGTCA"]
real_10x_data[,"GGATTACGTAGGACAC"]
order(real_10x_data[,"GGATTACGTAGGACAC"])
order(real_10x_data[,"GGATTACGTAGGACAC"],decreasing = T)
real_10x_data[,"GGATTACGTAGGACAC"])
real_10x_data[,"GGATTACGTAGGACAC")
real_10x_data[,"GGATTACGTAGGACAC")
real_10x_data[,"GGATTACGTAGGACAC"]
real_10x_data[c("TRBV7-8"),"GGATTACGTAGGACAC"]
real_10x_data[c("TRBV7-2"),"GGATTACGTAGGACAC"]
real_10x_data[c("TRBV26-1","TRBV4-1"),"GGATTACGTAGGACAC"]
sum(real_10x_data[,"GGATTACGTAGGACAC"])
sum(real_10x_data[,"GGATTACGTAGGACAC"])
sum(real_10x_data[,"ACGCAGCGTAAAGTCA"])
# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
# G48E2L1[["percent.mt"]] <- PercentageFeatureSet(G48E2L1, pattern = "^MT-")
# VlnPlot(G48E2L1, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
# plot1 <- FeatureScatter(G48E2L1, feature1 = "nCount_RNA", feature2 = "percent.mt")
# plot2 <- FeatureScatter(G48E2L1, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
# CombinePlots(plots = list(plot1, plot2))
#
# G48E2L1 <- subset(G48E2L1, subset = nFeature_RNA > 50 & nFeature_RNA < 2500 & percent.mt < 5)
# G48E2L1
## normalizing
G48E2L1 <- NormalizeData(G48E2L1, normalization.method = "LogNormalize", scale.factor = 10000)
## Scaling the data
all.genes <- rownames(G48E2L1)
G48E2L1 <- ScaleData(G48E2L1, features = all.genes)
## linear dimensional reduction (PCA)
G48E2L1 <- RunPCA(G48E2L1, features = VariableFeatures(object = G48E2L1))
G48E2L1 <- RunUMAP(G48E2L1,dims = 1:10)
## linear dimensional reduction (PCA)
G48E2L1 <- RunPCA(G48E2L1)
## identification of highly variable features(feature selection)
# G48E2L1 <- FindVariableFeatures(G48E2L1, selection.method = "vst", nfeatures = 2000)
G48E2L1 <- FindVariableFeatures(G48E2L1, selection.method = "vst",dispersion.function = LogVMR)
## linear dimensional reduction (PCA)
G48E2L1 <- RunPCA(G48E2L1)
G48E2L1 <- RunUMAP(G48E2L1,dims = 1:10)
sweep.res.list_kidney <- paramSweep_v3(G48E2L1, PCs = 1:10, sct = FALSE)
library(Doublets)
devtools::install_github('chris-mcginnis-ucsf/DoubletFinder')
library(DoubletFinder)
sweep.res.list_kidney <- paramSweep_v3(G48E2L1, PCs = 1:10, sct = FALSE)
sweep.stats_kidney <- summarizeSweep(sweep.res.list_kidney, GT = FALSE)
bcmvn_kidney <- find.pK(sweep.stats_kidney)
source("http://www.bioconductor.org/biocLite.R")
install.packages("BiocManager")
BiocManager::install(version = "3.10")
library(GEOquery)
biocLite("GEOquery")
BiocManager::install("GEOquery")
library(GEOquery)
BiocManager::install("GEOquery")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GEOquery")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GEOquery")
BiocManager::install("GEOquery")
library(GEOquery)
getGEO("GSE123814",destdir = 'F:\\downloadGSE')
getGEO("GSE123814",destdir = 'F:\\downloadGSE')
GSE123814 = getGEO("GSE123814",destdir = 'F:\\downloadGSE')
Table(GSE123814)
Meta(GSE123814)
GSE123814
GSE123813_single_cell = getGEO("GSE123813",destdir = 'F:\\downloadGSE')
a = read.table("F:\\downloadGSE\\GSE123814-GPL20301_series_matrix.txt.gz")
a = read.table("F:\\downloadGSE\\GSE123814-GPL20301_series_matrix.txt.gz",sep="\t",quote = "",fill = T)
a = read.table("F:\\downloadGSE\\GSE123814-GPL20301_series_matrix.txt.gz",sep="\t",
quote = "",fill = T,comment.char = "!",header = T)
View(a)
getdir()
setdir()
a = read.table("F:\\downloadGSE\\GSE123814-GPL18573_series_matrix.txt.gz",sep="\t",
quote = "",fill = T,comment.char = "!",header = T)
View(a)
GSE123813_single_cell = getGEO("GSE123812",destdir = 'F:\\downloadGSE')
GSE123813_single_cell = getGEO("GSE123813",destdir = 'F:\\downloadGSE')
GSE123813_single_cell = getGEO("GSE123813",destdir = 'F:\\downloadGSE')
GSE123813_single_cell = getGEO("GSE123812",destdir = 'F:\\downloadGSE')
GSE123813_single_cell = getGEO("GSE123813",destdir = 'F:\\downloadGSE')
a = read.table("F:\\downloadGSE\\GSE123813-GPL20301_series_matrix.txt.gz",sep="\t",
quote = "",fill = T,comment.char = "!",header = T)
View(a)
b = read.table("F:\\downloadGSE\\GSE123813-GPL18573_series_matrix.txt.gz",sep="\t",
quote = "",fill = T,comment.char = "!",header = T)
View(b)
c = read.table("F:\\downloadGSE\\GSE123813-GPL15520_series_matrix.txt.gz",sep="\t",
quote = "",fill = T,comment.char = "!",header = T)
View(a)
GSE123813_bcc_all_metadata = read.table("F:\\downloadGSE\\GSE123813_bcc_all_metadata.txt.gz",sep = "\t",
quote = "", fill = T, header = T)
plot(GSE123813_bcc_all_metadata[,6:7], col = GSE123813_bcc_all_metadata$cluster, pch = 20)
# Load dataset
real_10x_data = Read10X(data.dir = "G:\\projects\\R_stuff\\10xGenomics\\example_G48E2L1\\filtered_feature_bc_matrix")
# Initialize the Seurat object with the raw (non-normalized data).
G48E2L1 <-CreateSeuratObject(counts = real_10x_data, project = "G48E2L1",
min.cells = 3,min.features = 200)
real_10x_data[c("TRBV7-2","TRAV8-6","TRAV21","TRBV9"),"ACGCAGCGTAAAGTCA"]
# Load dataset
real_10x_data = Read10X(data.dir = "G:\\projects\\R_stuff\\10xGenomics\\example_G48E2L1\\filtered_feature_bc_matrix")
library(Seurat)
# Load dataset
real_10x_data = Read10X(data.dir = "G:\\projects\\R_stuff\\10xGenomics\\example_G48E2L1\\filtered_feature_bc_matrix")
# Initialize the Seurat object with the raw (non-normalized data).
G48E2L1 <-CreateSeuratObject(counts = real_10x_data, project = "G48E2L1",
min.cells = 3,min.features = 200)
# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
# G48E2L1[["percent.mt"]] <- PercentageFeatureSet(G48E2L1, pattern = "^MT-")
# VlnPlot(G48E2L1, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
# plot1 <- FeatureScatter(G48E2L1, feature1 = "nCount_RNA", feature2 = "percent.mt")
# plot2 <- FeatureScatter(G48E2L1, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
# CombinePlots(plots = list(plot1, plot2))
#
# G48E2L1 <- subset(G48E2L1, subset = nFeature_RNA > 50 & nFeature_RNA < 2500 & percent.mt < 5)
# G48E2L1
## normalizing
G48E2L1 <- NormalizeData(G48E2L1, normalization.method = "LogNormalize", scale.factor = 10000)
## identification of highly variable features(feature selection)
# G48E2L1 <- FindVariableFeatures(G48E2L1, selection.method = "vst", nfeatures = 2000)
G48E2L1 <- FindVariableFeatures(G48E2L1, selection.method = "vst",dispersion.function = LogVMR)
## Scaling the data
all.genes <- rownames(G48E2L1)
G48E2L1 <- ScaleData(G48E2L1, features = all.genes)
## linear dimensional reduction (PCA)
G48E2L1 <- RunPCA(G48E2L1)
G48E2L1 <- RunUMAP(G48E2L1,dims = 1:10)
# DimPlot(G48E2L1, reduction="pca")
# print(G48E2L1[["pca"]],dims = 1:5,nfeatures = 5)
# VizDimLoadings(G48E2L1, dims = 1:2, reduction = "pca")
G48E2L1
library(scRNAseq)
install.packages("scRNAseq")
BiocManager::install("scRNAseq")
library(scRNAseq)
sce <- MacoskoRetinaData()
# Quality control.
library(scater)
is.mito <- grepl("^MT-", rownames(sce))
sce <- MacoskoRetinaData()
sce <- MacoskoRetinaData()
sce <- MacoskoRetinaData()
library(scRNAseq)
sce <- MacoskoRetinaData()
# Quality control.
library(scater)
is.mito <- grepl("^MT-", rownames(sce))
is.mito
qcstats <- perCellQCMetrics(sce, subsets=list(Mito=is.mito))
filtered <- quickPerCellQC(qcstats, percent_subsets="subsets_Mito_percent")
sce <- sce[, !filtered$discard]
# Normalization.
sce <- logNormCounts(sce)
# Feature selection.
library(scran)
dec <- modelGeneVar(sce)
hvg <- getTopHVGs(dec, prop=0.1)
# Dimensionality reduction.
set.seed(1234)
sce <- runPCA(sce, ncomponents=25, subset_row=hvg)
sce <- runUMAP(sce, dimred = 'PCA', external_neighbors=TRUE)
# Clustering.
g <- buildSNNGraph(sce, use.dimred = 'PCA')
sce$clusters <- factor(igraph::cluster_louvain(g)$membership)
# Visualization.
plotUMAP(sce, colour_by="clusters")
sce
sce <- runTSNE(sce)
plotTSNE(sce)
?plotTSNE
plotTSNE(sce, colour_by = "clusters")
sce
sce.data
sce$clusters
sce$cell.id
sce$cluster
sce@assays
sce@assays$logcounts
sce@logcounts
sce$logcounts
logcounts
logcounts.data
library(SingleCellExperiment)
counts(sce)
sce
logcounts(sce)
sce
sce <- MacoskoRetinaData()
sce
cell_metadata <- data.frame(batch=c(1,1,2))
cell_metadata
rownames(cell_metadata) <- paste0("cell_",1:3)
cell_metadata
View(cell_metadata)
GSE123813_bcc_all_metadata = read.table("F:\\downloadGSE\\GSE123813_bcc_all_metadata.txt.gz",sep = "\t",
quote = "", fill = T, header = T)
ggplot(data=GSE123813_bcc_all_metadata, aes(x = UMAP1, UMAP2,col = GSE123813_bcc_all_metadata$cell.id)) +
geom_point()
library(ggplot2)
ggplot(data=GSE123813_bcc_all_metadata, aes(x = UMAP1, UMAP2,col = GSE123813_bcc_all_metadata$cell.id)) +
geom_point()
View(GSE123813_bcc_all_metadata)
ggplot(data=GSE123813_bcc_all_metadata, aes(x = UMAP1, UMAP2,col = cluster)) +
geom_point()
ggplot(data=GSE123813_bcc_all_metadata, aes(x = UMAP1, UMAP2,col = patient)) +
geom_point()
ggplot(data=GSE123813_bcc_all_metadata, aes(x = UMAP1, UMAP2,col = treatment)) +
geom_point()
View(GSE123813_bcc_all_metadata)
ggplot(data=GSE123813_bcc_all_metadata, aes(x = UMAP1, UMAP2,col = sort)) +
geom_point()
GSE123813_bcc_tcell_metadata = read.table("F:\\downloadGSE\\GSE123813_bcc_tcell_metadata.txt.gz",sep = "\t",
quote = "", fill = T, header = T)
ggplot(data=GSE123813_bcc_tcell_metadata, aes(x = UMAP1, UMAP2,col = cluster)) +
geom_point()
ggplot(data=GSE123813_bcc_tcell_metadata, aes(x = UMAP1, UMAP2,col = patient)) +
geom_point()
ggplot(data=GSE123813_bcc_tcell_metadata, aes(x = UMAP1, UMAP2,col = treatment)) +
geom_point()
View(GSE123813_bcc_tcell_metadata)
# end !!!
#########################################################################################################################################
# BiocManager::install("scRNAseq")
library(scRNAseq)
sce <- MacoskoRetinaData()
############################################################################################
# chapter 6
#--- setup ---#
library(OSCAUtils)
############################################################################################
# chapter 6
#--- setup ---#
BiocManager::install("OSCAUTILS")
library(OSCAUtils)
############################################################################################
# chapter 6
#--- setup ---#
BiocManager::install("OSCAUTILS")
install.packages("OSCAUTILS")
############################################################################################
# chapter 6
#--- setup ---#
BiocManager::install("OSCAUtils")
install.packages("OSCAUtils")
#--- loading ---#
library(scRNAseq)
sce.416b <- LunSpikeInData(which="416b")
sce.416b$block <- factor(sce.416b$block)
sce.416b <- LunSpikeInData(which="416b")
sce.416b$block <- factor(sce.416b$block)
sce.416b
counts(sce.416b)
sce.416b
altExpNames
altExpNames(sce.416b)
altExpNames(sce.416b)$ERCC
sce.416b
##
# Identifying the mitochondrial transcripts:
library(AnnotationHub)
ens.mm.v97 <- AnnotationHub()[["AH73905"]]
# 6.5 Cell calling for droplet data
# 6.5.1 Background
library(BiocFileCache)
bfc <- BiocFileCache("raw_data", ask = FALSE)
raw.path <- bfcrpath(bfc, file.path("http://cf.10xgenomics.com/samples",
"cell-exp/2.1.0/pbmc4k/pbmc4k_raw_gene_bc_matrices.tar.gz"))
untar(raw.path, exdir=file.path(tempdir(), "pbmc4k"))
library(DropletUtils)
BiocManager::install("DropletUtils")
library(DropletUtils)
library(Matrix)
fname <- file.path(tempdir(), "pbmc4k/raw_gene_bc_matrices/GRCh38")
sce.pbmc <- read10xCounts(fname, col.names=TRUE)
sce.pbmc
bcrank <- barcodeRanks(counts(sce.pbmc))
View(bcrank)
# Only showing unique points for plotting speed.
uniq <- !duplicated(bcrank$rank)
plot(bcrank$rank[uniq], bcrank$total[uniq], log="xy",
xlab="Rank", ylab="Total UMI count", cex.lab=1.2)
abline(h=metadata(bcrank)$inflection, col="darkgreen", lty=2)
abline(h=metadata(bcrank)$knee, col="dodgerblue", lty=2)
legend("bottomleft", legend=c("Inflection", "Knee"),
col=c("darkgreen", "dodgerblue"), lty=2, cex=1.2)
library(Seurat)
install.packages("Seurat")
install.packages("Seurat")
library(Seurat)
install.packages("multcomp")
library(Seurat)
# Load dataset
real_10x_data = Read10X(data.dir = "G:\\projects\\R_stuff\\10xGenomics\\example_G48E2L1\\filtered_feature_bc_matrix")
# Initialize the Seurat object with the raw (non-normalized data).
G48E2L1 <-CreateSeuratObject(counts = real_10x_data, project = "G48E2L1",
min.cells = 3,min.features = 200)
G48E2L1
library(SingleCellExperiment)
real_10x_data = Read10X(data.dir = "G:\\projects\\R_stuff\\10xGenomics\\example_G48E2L1\\filtered_feature_bc_matrix")
library(Seurat)
real_10x_data = Read10X(data.dir = "G:\\projects\\R_stuff\\10xGenomics\\example_G48E2L1\\filtered_feature_bc_matrix")
real_10x_data = Read10X(data.dir = "10xGenomics\\example_G48E2L1\\filtered_feature_bc_matrix")
sce <- SingleCellExperiment(assays = list(counts = real_10x_data))
sce
# cell calling for droplet data
bcrank <- barcodeRanks(counts(sce))
# cell calling for droplet data
library(DropletUtils)
bcrank <- barcodeRanks(counts(sce))
# Only showing unique points for plotting speed.
uniq <- !duplicated(bcrank$rank)
plot(bcrank$rank[uniq], bcrank$total[uniq], log="xy",
xlab="Rank", ylab="Total UMI count", cex.lab=1.2)
abline(h=metadata(bcrank)$inflection, col="darkgreen", lty=2)
abline(h=metadata(bcrank)$knee, col="dodgerblue", lty=2)
legend("bottomleft", legend=c("Inflection", "Knee"),
col=c("darkgreen", "dodgerblue"), lty=2, cex=1.2)
?emptyDrops
#### 6.5.2 Testing for empty droplets
e.out <- emptyDrops(counts(sce))
counts(sce)
#### 6.5.2 Testing for empty droplets
e.out <- emptyDrops(counts(sce))
#### 6.5.2 Testing for empty droplets
set.seed(100)
e.out <- emptyDrops(counts(sce))
bcrank <- barcodeRanks(counts(sce))
counts(sce)
# Only showing unique points for plotting speed.
uniq <- !duplicated(bcrank$rank)
plot(bcrank$rank[uniq], bcrank$total[uniq], log="xy",
xlab="Rank", ylab="Total UMI count", cex.lab=1.2)
abline(h=metadata(bcrank)$inflection, col="darkgreen", lty=2)
abline(h=metadata(bcrank)$knee, col="dodgerblue", lty=2)
legend("bottomleft", legend=c("Inflection", "Knee"),
col=c("darkgreen", "dodgerblue"), lty=2, cex=1.2)
e.out <- emptyDrops(counts(sce.pbmc))
View(sce)
e.out <- emptyDrops(counts(sce))
# See ?emptyDrops for an explanation of why there are NA values.
summary(e.out$FDR <= 0.001)
# 6.5 Cell calling for droplet data
# 6.5.1 Background
library(BiocFileCache)
bfc <- BiocFileCache("raw_data", ask = FALSE)
raw.path <- bfcrpath(bfc, file.path("http://cf.10xgenomics.com/samples",
"cell-exp/2.1.0/pbmc4k/pbmc4k_raw_gene_bc_matrices.tar.gz"))
untar(raw.path, exdir=file.path(tempdir(), "pbmc4k"))
BiocManager::install("DropletUtils")
library(DropletUtils)
library(Matrix)
fname <- file.path(tempdir(), "pbmc4k/raw_gene_bc_matrices/GRCh38")
sce.pbmc <- read10xCounts(fname, col.names=TRUE)
sce.pbmc
bcrank <- barcodeRanks(counts(sce.pbmc))
# Only showing unique points for plotting speed.
uniq <- !duplicated(bcrank$rank)
plot(bcrank$rank[uniq], bcrank$total[uniq], log="xy",
xlab="Rank", ylab="Total UMI count", cex.lab=1.2)
abline(h=metadata(bcrank)$inflection, col="darkgreen", lty=2)
abline(h=metadata(bcrank)$knee, col="dodgerblue", lty=2)
legend("bottomleft", legend=c("Inflection", "Knee"),
col=c("darkgreen", "dodgerblue"), lty=2, cex=1.2)
#### 6.5.2 Testing for empty droplets
# emptyDrops performs Monte Carlo simulations to compute p-values,
# so we need to set the seed to obtain reproducible results.
set.seed(100)
e.out <- emptyDrops(counts(sce))
e.out <- emptyDrops(counts(sce.pbmc))
# See ?emptyDrops for an explanation of why there are NA values.
summary(e.out$FDR <= 0.001)
colData(sce.pbmc)
table(Sig=e.out$FDR <= 0.001, Limited=e.out$Limited)
set.seed(100)
limit <- 100
all.out <- emptyDrops(counts(sce.pbmc),lower = limit, test.ambient=TRUE)
hist(all.out$PValue[all.out$Total <=limit & all.out$Total > 0],
xlab="P-value",main="", col = "grey80")
sce.pbmc <- sce.pbmc[,which(e.out$FDR <= 0.001)]
#####################################
# Chapter 8 Feature Selection
library(BiocFileCache)
bfc <- BiocFileCache("raw_data", ask = FALSE)
raw.path <- bfcrpath(bfc, file.path("http://cf.10xgenomics.com/samples",
"cell-exp/2.1.0/pbmc4k/pbmc4k_raw_gene_bc_matrices.tar.gz"))
untar(raw.path, exdir=file.path(tempdir(),"pbmc4k"))
fname <- file.path(tempdir(),"pbmc4k/raw_gene_bc_matrices/GRCH38")
sce.pbmc <- read10xCounts(fname, col.names = T)
#--- gene-annotation ---#
library(scater)
sce.pbmc
#--- gene-annotation ---#
library(scater)
rownames(sce.pbmc) <- uniquifyFeatureNames(
rowData(sce.pbmc)$ID, rowData(sce.pbmc)$Symbol)
library(EnsDb.Hsapiens.v86)
BiocManager::install("EnsDb.Hsapiens.v86")
library(Seurat)
library(SingleCellExperiment)
real_10x_data = Read10X(data.dir = "10xGenomics\\example_G48E2L1\\filtered_feature_bc_matrix")
G48E2L1 = CreateSeuratObject(real_10x_data)
# sce <- SingleCellExperiment(assays = list(counts = real_10x_data))
G48E2L1 <- NormalizeData(G48E2L1)
G48E2L1 <- ScaleData(G48E2L1)
G48E2L1 <- FindVariableFeatures(G48E2L1, selection.method = "vst", nfeatures = 2000)
G48E2L1 <- RunPCA(G48E2L1)
G48E2L1 <- RunUMAP(G48E2L1, dims= 1:10)
sweep.res.list_kidney <- paramSweep_v3(G48E2L1, PCs = 1:10, sct = FALSE)
sweep.stats_kidney <- summarizeSweep(sweep.res.list_kidney, GT = FALSE)
bcmvn_kidney <- find.pK(sweep.stats_kidney)
library(DoubletFinder)
sweep.res.list_kidney <- paramSweep_v3(G48E2L1, PCs = 1:10, sct = FALSE)
sweep.stats_kidney <- summarizeSweep(sweep.res.list_kidney, GT = FALSE)
bcmvn_kidney <- find.pK(sweep.stats_kidney)
