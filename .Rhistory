# ??FindNeighbors()
## non-linear dimensional reduction(UMAP/tSNE)
G48E2L1 <- RunUMAP(G48E2L1,dims = 1:5)
DimPlot(G48E2L1, reduction = "umap",label = TRUE)
# ??FindNeighbors()
## non-linear dimensional reduction(UMAP/tSNE)
G48E2L1 <- RunUMAP(G48E2L1,dims = 1:10)
DimPlot(G48E2L1, reduction = "umap",label = TRUE)
## identification of highly variable features(feature selection)
# G48E2L1 <- FindVariableFeatures(G48E2L1, selection.method = "vst", nfeatures = 2000)
G48E2L1 <- FindVariableFeatures(G48E2L1, selection.method = "vst")
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(G48E2L1), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(G48E2L1)
plot2 <- LabelPoints(plot = plot1, points = top10)
CombinePlots(plots = list(plot1, plot2))
## Scaling the data
all.genes <- rownames(G48E2L1)
G48E2L1 <- ScaleData(G48E2L1, features = all.genes)
## linear dimensional reduction (PCA)
G48E2L1 <- RunPCA(G48E2L1, features = VariableFeatures(object = G48E2L1))
DimPlot(G48E2L1, reduction="pca")
## Cluster the cells
G48E2L1 <- FindNeighbors(G48E2L1, dims = 1:5)
G48E2L1 <- FindClusters(G48E2L1, resolution = 0.5)
# ??FindNeighbors()
## non-linear dimensional reduction(UMAP/tSNE)
G48E2L1 <- RunUMAP(G48E2L1,dims = 1:10)
DimPlot(G48E2L1, reduction = "umap",label = TRUE)
# ??FindNeighbors()
## non-linear dimensional reduction(UMAP/tSNE)
G48E2L1 <- RunUMAP(G48E2L1,dims = 1:5)
DimPlot(G48E2L1, reduction = "umap",label = TRUE)
# ??FindNeighbors()
## non-linear dimensional reduction(UMAP/tSNE)
G48E2L1 <- RunUMAP(G48E2L1,dims = 1)
# ??FindNeighbors()
## non-linear dimensional reduction(UMAP/tSNE)
G48E2L1 <- RunUMAP(G48E2L1,dims = 1:2)
DimPlot(G48E2L1, reduction = "umap",label = TRUE)
# ??FindNeighbors()
## non-linear dimensional reduction(UMAP/tSNE)
G48E2L1 <- RunUMAP(G48E2L1,dims = 2:3)
DimPlot(G48E2L1, reduction = "umap",label = TRUE)
# ??FindNeighbors()
## non-linear dimensional reduction(UMAP/tSNE)
G48E2L1 <- RunUMAP(G48E2L1,dims = 2:4)
DimPlot(G48E2L1, reduction = "umap",label = TRUE)
# ??FindNeighbors()
## non-linear dimensional reduction(UMAP/tSNE)
G48E2L1 <- RunUMAP(G48E2L1,dims = 1:10)
DimPlot(G48E2L1, reduction = "umap",label = TRUE)
# ??FindNeighbors()
## non-linear dimensional reduction(UMAP/tSNE)
G48E2L1 <- RunUMAP(G48E2L1,dims = 1:11)
DimPlot(G48E2L1, reduction = "umap",label = TRUE)
## Cluster the cells
G48E2L1 <- FindNeighbors(G48E2L1, dims = 1:10)
G48E2L1 <- FindClusters(G48E2L1, resolution = 0.5)
# ??FindNeighbors()
## non-linear dimensional reduction(UMAP/tSNE)
G48E2L1 <- RunUMAP(G48E2L1,dims = 1:11)
DimPlot(G48E2L1, reduction = "umap",label = TRUE)
# ??FindNeighbors()
## non-linear dimensional reduction(UMAP/tSNE)
G48E2L1 <- RunUMAP(G48E2L1,dims = 1:10)
DimPlot(G48E2L1, reduction = "umap",label = TRUE)
G48E2L1.markers <- FindAllMarkers(G48E2L1, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
G48E2L1.markers %>% group_by(cluster) %>% top_n(n=2, wt = avg_logFC)
FeaturePlot(G48E2L1, features = c("CD8A","NKG7","GZMB","CCL5","GIMAP7","CTSL","HIST1H4C","HIST1H1B", "CD74","HLA-DPA1","HIST1H1E","HIST1H2AI","PMCH","CSF2")
)
FeaturePlot(G48E2L1, features = c("CD4","CD8A","CD8B"))
library(Seurat)
library(dplyr)
real_10x_data = Read10X(data.dir = "G:\\projects\\R_stuff\\10xGenomics\\example_G48E2L1\\filtered_feature_bc_matrix")
G48E2L1 <-CreateSeuratObject(counts = real_10x_data, project = "G48E2L1",)
# mt
G48E2L1[["percent.mt"]] <- PercentageFeatureSet(G48E2L1, pattern = "^MT-")
VlnPlot(G48E2L1, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(G48E2L1, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(G48E2L1, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
CombinePlots(plots = list(plot1, plot2))
G48E2L1 <- subset(G48E2L1, subset = percent.mt < 5)
## normalizing
G48E2L1 <- NormalizeData(G48E2L1, normalization.method = "LogNormalize", scale.factor = 10000)
## identification of highly variable features(feature selection)
# G48E2L1 <- FindVariableFeatures(G48E2L1, selection.method = "vst", nfeatures = 2000)
G48E2L1 <- FindVariableFeatures(G48E2L1, selection.method = "vst")
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(G48E2L1), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(G48E2L1)
plot2 <- LabelPoints(plot = plot1, points = top10)
CombinePlots(plots = list(plot1, plot2))
## Scaling the data
all.genes <- rownames(G48E2L1)
G48E2L1 <- ScaleData(G48E2L1, features = all.genes)
## linear dimensional reduction (PCA)
G48E2L1 <- RunPCA(G48E2L1, features = VariableFeatures(object = G48E2L1))
DimPlot(G48E2L1, reduction="pca")
## Cluster the cells
G48E2L1 <- FindNeighbors(G48E2L1, dims = 1:10)
G48E2L1 <- FindClusters(G48E2L1, resolution = 0.5)
# ??FindNeighbors()
## non-linear dimensional reduction(UMAP/tSNE)
G48E2L1 <- RunUMAP(G48E2L1,dims = 1:10)
DimPlot(G48E2L1, reduction = "umap",label = TRUE)
# ??FindNeighbors()
## non-linear dimensional reduction(UMAP/tSNE)
G48E2L1 <- RunUMAP(G48E2L1,dims = 1:9)
DimPlot(G48E2L1, reduction = "umap",label = TRUE)
G48E2L1 <- RunTSNE(G48E2L1,dims = 1:10)
DimPlot(G48E2L1,reduction = "tsne",label = TRUE)
summary(G48E2L1)
G48E2L1
real_10x_data = Read10X(data.dir = "G:\\projects\\R_stuff\\10xGenomics\\example_G48E2L1\\filtered_feature_bc_matrix")
G48E2L1 <-CreateSeuratObject(counts = real_10x_data, project = "G48E2L1",)
G48E2L1
G48E2L1 <-CreateSeuratObject(counts = real_10x_data, project = "G48E2L1",min.cells = 3,min.features = 200)
G48E2L1
# mt
G48E2L1[["percent.mt"]] <- PercentageFeatureSet(G48E2L1, pattern = "^MT-")
VlnPlot(G48E2L1, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(G48E2L1, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(G48E2L1, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
CombinePlots(plots = list(plot1, plot2))
G48E2L1 <- subset(G48E2L1, subset = percent.mt < 5)
## normalizing
G48E2L1 <- NormalizeData(G48E2L1, normalization.method = "LogNormalize", scale.factor = 10000)
## identification of highly variable features(feature selection)
# G48E2L1 <- FindVariableFeatures(G48E2L1, selection.method = "vst", nfeatures = 2000)
G48E2L1 <- FindVariableFeatures(G48E2L1, selection.method = "vst")
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(G48E2L1), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(G48E2L1)
plot2 <- LabelPoints(plot = plot1, points = top10)
CombinePlots(plots = list(plot1, plot2))
## Scaling the data
all.genes <- rownames(G48E2L1)
G48E2L1 <- ScaleData(G48E2L1, features = all.genes)
## linear dimensional reduction (PCA)
G48E2L1 <- RunPCA(G48E2L1, features = VariableFeatures(object = G48E2L1))
DimPlot(G48E2L1, reduction="pca")
## Cluster the cells
G48E2L1 <- FindNeighbors(G48E2L1, dims = 1:10)
G48E2L1 <- FindClusters(G48E2L1, resolution = 0.5)
# ??FindNeighbors()
## non-linear dimensional reduction(UMAP/tSNE)
G48E2L1 <- RunUMAP(G48E2L1,dims = 1:10)
DimPlot(G48E2L1, reduction = "umap",label = TRUE)
## Finding differentially expressed features (cluster biomarkers)
??FindMarkers()
cluster1.markers <- FindMarkers(G48E2L1, ident.1 = 1)
head(cluster1.markers, n=5)
cluster1.markers <- FindMarkers(G48E2L1, ident.1 = 1, min.pct = 0.25)
head(cluster1.markers, n=5)
G48E2L1.markers <- FindAllMarkers(G48E2L1, min.pct = 0.25, logfc.threshold = 0.25)
G48E2L1.markers %>% group_by(cluster) %>% top_n(n=2, wt = avg_logFC)
FeaturePlot(G48E2L1, features = c("CD8A","NKG7","GIMAP7","CTSL","HSPD1","FABP5","HIST1H4C","HIST1H1B","GZMB","CCL5","HIST1H1E","HIST1H2AI","PMCH","CSF2"))
FeaturePlot(G48E2L1, features = c("CD4","CD8A","CD8B"))
FeaturePlot(G48E2L1, features = c("CD4","CD8A","CD8B"),label = TRUE)
??FeaturePlot()
library(Seurat)
library(dplyr)
real_10x_data = Read10X(data.dir = "G:\\projects\\R_stuff\\10xGenomics\\example_G48E2L1\\filtered_feature_bc_matrix")
G48E2L1 <-CreateSeuratObject(counts = real_10x_data, project = "G48E2L1",min.cells = 3,min.features = 200)
G48E2L1
# mt
G48E2L1[["percent.mt"]] <- PercentageFeatureSet(G48E2L1, pattern = "^MT-")
VlnPlot(G48E2L1, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(G48E2L1, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(G48E2L1, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
CombinePlots(plots = list(plot1, plot2))
G48E2L1 <- subset(G48E2L1, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
## normalizing
G48E2L1 <- NormalizeData(G48E2L1, normalization.method = "LogNormalize", scale.factor = 10000)
## identification of highly variable features(feature selection)
# G48E2L1 <- FindVariableFeatures(G48E2L1, selection.method = "vst", nfeatures = 2000)
G48E2L1 <- FindVariableFeatures(G48E2L1, selection.method = "vst")
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(G48E2L1), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(G48E2L1)
plot2 <- LabelPoints(plot = plot1, points = top10)
CombinePlots(plots = list(plot1, plot2))
## Scaling the data
all.genes <- rownames(G48E2L1)
G48E2L1 <- ScaleData(G48E2L1, features = all.genes)
## linear dimensional reduction (PCA)
G48E2L1 <- RunPCA(G48E2L1, features = VariableFeatures(object = G48E2L1))
DimPlot(G48E2L1, reduction="pca")
## Cluster the cells
G48E2L1 <- FindNeighbors(G48E2L1, dims = 1:10)
G48E2L1 <- FindClusters(G48E2L1, resolution = 0.5)
# ??FindNeighbors()
## non-linear dimensional reduction(UMAP/tSNE)
G48E2L1 <- RunUMAP(G48E2L1,dims = 1:10)
DimPlot(G48E2L1, reduction = "umap",label = TRUE)
G48E2L1 <- RunTSNE(G48E2L1,dims = 1:10)
DimPlot(G48E2L1,reduction = "tsne",label = TRUE)
G48E2L1.markers <- FindAllMarkers(G48E2L1, min.pct = 0.25, logfc.threshold = 0.25)
G48E2L1.markers %>% group_by(cluster) %>% top_n(n=2, wt = avg_logFC)
FeaturePlot(G48E2L1, features = c("HIST1H4C","UBE2C","GIMAP7","CTSL","GZMB","CCL5","HIST1H1E","HIST1H2AI","TNFRSF4","PMCH","TUBA1C","KPNA2"))
??FeaturePlot()
FeaturePlot(G48E2L1, features = c("HIST1H4C","UBE2C","GIMAP7","CTSL","GZMB","CCL5","HIST1H1E","HIST1H2AI","TNFRSF4","PMCH","TUBA1C","KPNA2"),label = TRUE)
vlnPlot(G48E2L1, features = c("HIST1H4C","UBE2C","GIMAP7","CTSL","GZMB","CCL5","HIST1H1E","HIST1H2AI","TNFRSF4","PMCH","TUBA1C","KPNA2"),label = TRUE)
VlnPlot(G48E2L1, features = c("HIST1H4C","UBE2C","GIMAP7","CTSL","GZMB","CCL5","HIST1H1E","HIST1H2AI","TNFRSF4","PMCH","TUBA1C","KPNA2"),label = TRUE)
# G48E2L1.markers
VlnPlot(G48E2L1, features = c("CD4","CD8A","CD8B"),label=TRUE)
FeaturePlot(G48E2L1, features = c("CD4","CD8A","CD8B"),label = TRUE)
FeaturePlot(G48E2L1, features = c("MS4A1", "GNLY", "CD3E", "CD14", "FCER1A", "FCGR3A", "LYZ", "PPBP", "CD8A"))
DimPlot(G48E2L1, reduction = "umap", label = TRUE, pt.size = 0.5) + NoLegend()
library(Seurat)
library(dplyr)
real_10x_data = Read10X(data.dir = "G:\\projects\\R_stuff\\10xGenomics\\example_G48E2L1\\filtered_feature_bc_matrix")
G48E2L1 <-CreateSeuratObject(counts = real_10x_data, project = "G48E2L1",min.cells = 3,min.features = 200)
G48E2L1
# mt
G48E2L1[["percent.mt"]] <- PercentageFeatureSet(G48E2L1, pattern = "^MT-")
VlnPlot(G48E2L1, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(G48E2L1, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(G48E2L1, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
CombinePlots(plots = list(plot1, plot2))
G48E2L1 <- subset(G48E2L1, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
G48E2L1
devtools::install_github('cole-trapnell-lab/leidenbase')
devtools::install_github('cole-trapnell-lab/monocle3')
devtools::install_github('cole-trapnell-lab/monocle3')
library(monocle3)
devtools::install_github('cole-trapnell-lab/monocle3')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
BiocManager::install(c('BiocGenerics', 'DelayedArray', 'DelayedMatrixStats',
'limma', 'S4Vectors', 'SingleCellExperiment',
'SummarizedExperiment', 'batchelor'))
library(monocle3)
devtools::install_github('cole-trapnell-lab/monocle3')
install.packages("batchelor")
BiocManager::install("batchelor")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
BiocManager::install(c('BiocGenerics', 'DelayedArray', 'DelayedMatrixStats',
'limma', 'S4Vectors', 'SingleCellExperiment',
'SummarizedExperiment', 'batchelor'))
install.packages("devtools")
devtools::install_github('cole-trapnell-lab/leidenbase')
devtools::install_github('cole-trapnell-lab/monocle3')
install.packages("devtools")
library(monocle3)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("batchelor")
version
install.packages("installr")
require(installr)
updateR()
updateR()
library(Seurat)
library(ggplot2)
install.packages(c("Seurat","ggplot2"))
library(ggplot2)
library(Seurat)
library(monocle3)
devtools::install_github('cole-trapnell-lab/monocle3')
install.packages("devtools")
devtools::install_github('cole-trapnell-lab/monocle3')
devtools::install_github('cole-trapnell-lab/leidenbase')
BiocManager::install(c('BiocGenerics', 'DelayedArray', 'DelayedMatrixStats',
'limma', 'S4Vectors', 'SingleCellExperiment',
'SummarizedExperiment', 'batchelor'))
install.packages("BiocManager")
BiocManager::install()
BiocManager::install(c('BiocGenerics', 'DelayedArray', 'DelayedMatrixStats',
'limma', 'S4Vectors', 'SingleCellExperiment',
'SummarizedExperiment', 'batchelor'))
devtools::install_github('cole-trapnell-lab/monocle3')
library(monocle3)
library(Seurat)
real_10x_data = Read10X(data.dir = "G:\\projects\\R_stuff\\10xGenomics\\example_G48E2L1\\filtered_feature_bc_matrix")
G48E2L1 <-CreateSeuratObject(counts = real_10x_data, project = "G48E2L1",min.cells = 3,min.features = 200)
G48E2L1
getwd()
expression_matrix <- readRDS(url("http://staff.washington.edu/hpliner/data/cao_l2_expression.rds"))
data <- as()
data <- as(as.matrix(G48E2L1@assays$RNA@data),'sparseMatrix')
data
pd <- new('AnnotatedDataFrame', data = G48E2L1@meta.data)
fData <- data.frame(gene_short_name = row.names(data), row.names = row.names(data))
fd <- new('AnnotatedDataFrame', data = fData)
#Construct monocle cds
HSMM <- newCellDataSet(data,
phenoData = pd,
featureData = fd,
#lowerDetectionLimit = 0.5,
expressionFamily = uninormal())# since I have already normalized, thresholded and scalled in Suerat v3.0.0.9150
#Construct monocle cds
HSMM <- new_cell_data_set(data,
phenoData = pd,
featureData = fd,
#lowerDetectionLimit = 0.5,
expressionFamily = uninormal())# since I have already normalized, thresholded and scalled in Suerat v3.0.0.9150
cds <- new_cell_data_set(data,
cell_metadata = pd,
gene_metadata = fd)
expression_matrix <- readRDS(url("http://staff.washington.edu/hpliner/data/cao_l2_expression.rds"))
cell_metadata <- readRDS(url("http://staff.washington.edu/hpliner/data/cao_l2_colData.rds"))
gene_annotation <- readRDS(url("http://staff.washington.edu/hpliner/data/cao_l2_rowData.rds"))
cell_metadata
gene_annotation
expression_matrix
DoHeatmap(subset(G48E2L1, downsample = 100), features = features, size = 3)
library(Seurat)
library(dplyr)
real_10x_data = Read10X(data.dir = "G:\\projects\\R_stuff\\10xGenomics\\example_G48E2L1\\filtered_feature_bc_matrix")
G48E2L1 <-CreateSeuratObject(counts = real_10x_data, project = "G48E2L1",min.cells = 3,min.features = 200)
G48E2L1
# mt
G48E2L1[["percent.mt"]] <- PercentageFeatureSet(G48E2L1, pattern = "^MT-")
VlnPlot(G48E2L1, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(G48E2L1, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(G48E2L1, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
CombinePlots(plots = list(plot1, plot2))
G48E2L1 <- subset(G48E2L1, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
G48E2L1
## normalizing
G48E2L1 <- NormalizeData(G48E2L1, normalization.method = "LogNormalize", scale.factor = 10000)
## identification of highly variable features(feature selection)
# G48E2L1 <- FindVariableFeatures(G48E2L1, selection.method = "vst", nfeatures = 2000)
G48E2L1 <- FindVariableFeatures(G48E2L1, selection.method = "vst")
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(G48E2L1), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(G48E2L1)
plot2 <- LabelPoints(plot = plot1, points = top10)
CombinePlots(plots = list(plot1, plot2))
## Scaling the data
all.genes <- rownames(G48E2L1)
G48E2L1 <- ScaleData(G48E2L1, features = all.genes)
## linear dimensional reduction (PCA)
G48E2L1 <- RunPCA(G48E2L1, features = VariableFeatures(object = G48E2L1))
DimPlot(G48E2L1, reduction="pca")
## Cluster the cells
G48E2L1 <- FindNeighbors(G48E2L1, dims = 1:10)
G48E2L1 <- FindClusters(G48E2L1, resolution = 0.5)
# ??FindNeighbors()
## non-linear dimensional reduction(UMAP/tSNE)
G48E2L1 <- RunUMAP(G48E2L1,dims = 1:10)
DimPlot(G48E2L1, reduction = "umap",label = TRUE)
G48E2L1.markers <- FindAllMarkers(G48E2L1, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
G48E2L1.markers %>% group_by(cluster) %>% top_n(n=2, wt = avg_logFC)
DotPlot(G48E2L1, features = features) + RotatedAxis()
DotPlot(G48E2L1, features = c("LYZ", "CCL5", "IL32", "PTPRCAP", "FCGR3A", "PF4")) + RotatedAxis()
FeaturePlot(G48E2L1, features = "CD4")
FeaturePlot(G48E2L1, features = "CD4", min.cutoff = 1,max.cutoff = 3)
FeaturePlot(G48E2L1, features = c("CD4","CD8A","CD8B"),blend = TRUE)
FeaturePlot(G48E2L1, features = c("CD4","CD8B"),blend = TRUE)
G48E2L1.markers
G48E2L1.markers.cluster0 = filter(G48E2L1.markers, cluster == 0)
G48E2L1.markers.cluster0
G48E2L1.markers.cluster0 = filter(G48E2L1.markers, cluster == 0,gene)
G48E2L1.markers.cluster0
G48E2L1.markers.cluster0 = filter(G48E2L1.markers, cluster == 0) %>% select(G48E2L1.markers,gene)
G48E2L1.markers.cluster0 = %>% filter(cluster == 0)
G48E2L1.markers.cluster0 = filter(G48E2L1.markers, cluster == 0) %>% select(G48E2L1.markers, G48E2L1.markers$gene)
G48E2L1.markers.cluster0 = G48E2L1.markers %>% filter(cluster==0)
G48E2L1.markers.cluster0
G48E2L1.markers.cluster0 = G48E2L1.markers %>% filter(cluster==0) %>% select(gene)
G48E2L1.markers.cluster0
# G48E2L1.markers.cluster0 = filter(G48E2L1.markers, cluster == 0)
G48E2L1.markers.cluster0 = G48E2L1.markers %>% filter(cluster== 0) %>% select(gene)
G48E2L1.markers.cluster1 = G48E2L1.markers %>% filter(cluster== 1) %>% select(gene)
G48E2L1.markers.cluster2 = G48E2L1.markers %>% filter(cluster== 2) %>% select(gene)
G48E2L1.markers.cluster3 = G48E2L1.markers %>% filter(cluster== 3) %>% select(gene)
G48E2L1.markers.cluster4 = G48E2L1.markers %>% filter(cluster== 4) %>% select(gene)
G48E2L1.markers.cluster5 = G48E2L1.markers %>% filter(cluster== 5) %>% select(gene)
G48E2L1.markers.cluster0
G48E2L1.markers.cluster0$GeneName <- as.character(G48E2L1.markers.cluster0)
G48E2L1.markers.cluster0$GeneName
# G48E2L1.markers.cluster0 = filter(G48E2L1.markers, cluster == 0)
G48E2L1.markers.cluster0 = G48E2L1.markers %>% filter(cluster== 0) %>% select(gene) %>% names("GeneName")
names(G48E2L1.markers.cluster0) <- "GeneName"
G48E2L1.markers.cluster0
head(G48E2L1.markers.cluster0)
# G48E2L1.markers <- FindAllMarkers(G48E2L1, min.pct = 0.25, logfc.threshold = 0.25)
G48E2L1.markers %>% group_by(cluster) %>% top_n(n=2, wt = avg_logFC)
G48E2L1.markers.cluster0
View(G48E2L1.markers.cluster0)
View(G48E2L1.markers.cluster0)
View(G48E2L1.markers.cluster1)
View(G48E2L1.markers.cluster0)
View(G48E2L1.markers)
View(G48E2L1.markers.cluster0)
View(G48E2L1.markers.cluster1)
View(G48E2L1.markers.cluster2)
View(G48E2L1.markers.cluster3)
View(G48E2L1.markers.cluster4)
View(G48E2L1.markers.cluster5)
View(gene_annotation)
rm G48E2L1.markers.cluster0
rm(G48E2L1.markers.cluster0)
# G48E2L1.markers.cluster0 = filter(G48E2L1.markers, cluster == 0)
G48E2L1.markers.cluster0 = G48E2L1.markers %>% filter(cluster== 0) %>% select(gene)
G48E2L1.markers.cluster0$gene <- as.character(G48E2L1.markers.cluster0$gene)
View(G48E2L1.markers.cluster0)
View(G48E2L1.markers.cluster1)
library(DOSE)
install.packages("DOSE")
source("https://bioconductor.org/biocLite.R")
biocLite("DOSE")
BiocManager::install(c("DOSE","topGO","clusterProfiler","pathview"))
library(DOSE)
library(org.Hs.eg.db)
library(topGO)
library(clusterProfiler)
library(pathview)
transID = bitr(G48E2L1.markers.cluster0$gene,
fromType = "SYMBOL",
toType = c("ENSEMBL","ENTREZID"),
OrgDb = "org.Hs.eg.db")
CC <- enrichGO(gene = transID$ENTREZID, OrgDb = "org.Hs.eg.db", keyType = "ENTREZID", ont = "CC", pvalueCutoff = 0.5, pAdjustMethod = "BH",qvalueCutoff = 0.5)
CC <- setReadable(CC, OrgDb=org.Hs.eg.db)
dotplot(CC, showCategory=12, font.size=8, title="GO_CC")
barplot(CC, showCategory=12, title="GO_CC", font.size=8)
plotGOgraph(CC)
MF <- enrichGO(transID$ENTREZID, "org.Hs.eg.db", keyType="ENTREZID", ont="MF", pvalueCutoff=0.5, pAdjustMethod="BH", qvalueCutoff=0.5)
MF <- setReadable(MF, OrgDb=org.Hs.eg.db)
dotplot(MF, showCategory=12, font.size=8, title="GO_MF") # + theme(axis.text.y = element_text(angle = 45))
barplot(MF, showCategory=12, title="GO_MF", font.size=8)
plotGOgraph(MF)
BP <- enrichGO(transID$ENTREZID, "org.Hs.eg.db", keyType="ENTREZID", ont="BP", pvalueCutoff=0.5, pAdjustMethod="BH", qvalueCutoff=0.5)
dotplot(BP, showCategory=12, font.size=8, title="GO_BP") # + theme(axis.text.y = element_text(angle = 45))
barplot(BP, showCategory=12, title="GO_BP", font.size=8)
??setReadable()
kegg <- enrichKEGG(transID$ENTREZID, organism="hsa", pvalueCutoff=0.5, pAdjustMethod="BH", qvalueCutoff=0.5)
dotplot(kegg, showCategory=12, font.size=8, title="KEGG") # + theme(axis.text.y = element_text(angle = 45))
barplot(kegg, showCategory=12, title="KEGG", font.size=8)
kegg@result
MF@result
head(MF@result)
install.packages("ROCR")
install.packages("ROCR")
install.packages("ROCR")
library(Seurat)
library(dplyr)
real_10x_data = Read10X(data.dir = "G:\\projects\\R_stuff\\10xGenomics\\example_G48E2L1\\filtered_feature_bc_matrix")
G48E2L1 <-CreateSeuratObject(counts = real_10x_data, project = "G48E2L1",min.cells = 3,min.features = 200)
G48E2L1
biolite()
biocLite()
source("http://www.bioconductor.org/biocLite.R")
BiocManager::install()
as.numeric(1L)
x= matrix(1:9, ncol = 3, nrow = 3)
x
rownames(x) = letters[1:3]
dim(x)
nrow(x)
ncol(x)
x[,1:2]
x[1:2,1:2]
x["a",]
x["a",,drop=FALSE]
a[x>5]
x[x>5]
x= matrix(1:9, ncol = 3, nrow = 3)
x= matrix(1:9, ncol = 3, nrow = 3,byrow = TRUE)
x
x = list(a=rnorm(3),b=letters[1:5],matrix)
x
x[1:2]
x[1]
x[[1]]
x["a"]
x$a
names(x) = c("a","letters","c")
x$letters
x$let
as.list(1:3)
x = list(rnorm(3),3:9)
x
lapply(x, mean)
unlist(lapply(x, mean))
sapply(x,mean)
x <- data.frame(sex=c("M","M","F"), age=c(32,34,29))
x
x$sex
x[["sex"]]
x[1,"sex"]
x
sapply(x, class)
x
as.matrix(x)
as.list(x)
library(methods)
as(x,"matrix")
library(SingleCellExperiment)
counts = matrix(rpois(100, lambda=10), ncol = 10, nrow = 10)
counts
rownames(counts) <- paste("gene",1:10, sep = "")
counts
colnames(counts) <- paste("cell",1:10, sep = "")
counts
View(G48E2L1)
View(real_10x_data)
View(x)
dim(G48E2L1)
??CreateSeuratObject()
??FindVariableFeatures()
