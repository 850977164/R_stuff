hc = hclust(dist(USArrests),"ave")
plot(hc)
plot(hc,hang = -1)
plot(hclust(dist(notes)))
x = rbind(matrix(rnorm(100,sd=0.3),ncol=2),matrix(rnorm(100,mean=1,sd=0.3),ncol=2))
cl = kmeans(x,2,20)
plot(x,col = cl$cluster,pch=3,lwd=1)
points(cl$centers,col=1:2,pch=7,lwd=3)
segments(x[cl$cluster==1,][,1],x[cl$cluster==1,][,2],cl$centers[1,1],cl$centers[1,2])
segments(x[cl$cluster==2,][,1],x[cl$cluster==2,][,2],cl$centers[2,1],cl$centers[2,2],col=2)
data("USArrests")
hc = hclust(dist(USArrests),"ave")
plot(hc,hang = -1)
help(dist())
help(dist
Contents
help(dist)
help(daisy)
library(cluster)
help(daisy)
help(kmeans)
sanfrancisco
data=Data("sanfrancisco")
library(clusterProfiler)
library(topGO)
library(Rgraphviz)
library(pathview)
library(org.Hs.eg.db)
data = read.table("gene.list",header = T)
data
data$GeneName = as.character(data$GeneName)
data
transID = bitr(data$GeneName,
fromType = "SYMBOL",
toType = c("ENSEMBLE","ENTREZID"),
OrgDb = "org.Hs.db")
transID = bitr(data$GeneName,
fromType = "SYMBOL",
toType = c("ENSEMBLE","ENTREZID"),
OrgDb = "org.Hs.eg.db")
transID = bitr(data$GeneName,
fromType="SYMBOL",
toType=c("ENSEMBL", "ENTREZID"),
OrgDb="org.Hs.eg.db"
)
transID = bitr(data$GeneName,
fromType = "SYMBOL",
toType = c("ENSEMBL","ENTREZID"),
OrgDb = "org.Hs.eg.db")
transID
entrezID = mapIds(x=org.Hs.eg,
keys = data$GeneName,
keytype = "SYMBOL",
column = "ENTREZID")
entrezID = mapIds(x=org.Hs.eg,
keys = data,
keytype = "SYMBOL",
column = "ENTREZID")
entrezID = mapIds(x=org.Hs.eg.db,
keys = data,
keytype = "SYMBOL",
column = "ENTREZID")
entrezID = mapIds(x=org.Hs.eg.db,
keys = data$GeneName,
keytype = "SYMBOL",
column = "ENTREZID")
entrezID
CC <- enrichGO(transID$ENTREZID,
"org.Hs.eg.db",
keyType="ENTREZID",
ont="CC",
pvalueCutoff=0.05,
pAdjustMethod="BH",
qvalueCutoff=0.1
)
barplot(CC)
BP = enrichGO(gene = transID$ENTREZID,
OrgDb = org.Hs.eg.db,
keyType = "ENTREZID",
ont = "BP",
pvalueCutoff = 0.05,
qvalueCutoff = 0.1)
dotplot(BP)
BP = enrichGO(gene = transID$ENTREZID,
OrgDb = org.Hs.eg.db,
keyType = "ENTREZID",
ont = "BP",
pvalueCutoff = 0.5,
qvalueCutoff = 0.5)
dotplot(BP)
BP = enrichGO(gene = transID$ENTREZID,
OrgDb = org.Hs.eg.db,
keyType = "ENTREZID",
ont = "BP",
pvalueCutoff = 0.5,
qvalueCutoff = 0.5,
pAdjustMethod = "BH")
dotplot(BP)
CC <- enrichGO(gene = transID$ENTREZID,
OrgDb = "org.Hs.eg.db",
keyType="ENTREZID",
ont="CC",
pvalueCutoff=0.05,
pAdjustMethod="BH",
qvalueCutoff=0.1
)
barplot(CC)
CC <- enrichGO(gene = transID$ENTREZID,
OrgDb = "org.Hs.eg.db",
keyType="ENTREZID",
ont="CC",
pvalueCutoff=0.5,
pAdjustMethod="BH",
qvalueCutoff=0.5
)
barplot(CC)
print(CC)
plotGOgraph(BP)
MF <- enrichGO(transID$ENTREZID, "org.Hs.eg.db", keyType="ENTREZID", ont="MF", pvalueCutoff=0.5, pAdjustMethod="BH", qvalueCutoff=0.5)
dotplot(MF)
barplot(MF)
plotGOgraph(MF)
print(CC)
MF <- enrichGO(transID$ENTREZID,
"org.Hs.eg.db",
keyType="ENTREZID",
ont="MF",
pvalueCutoff=0.5,
pAdjustMethod="BH",
qvalueCutoff=0.1)
dotplot(MF)
barplot(MF)
MF <- enrichGO(transID$ENTREZID,
"org.Hs.eg.db",
keyType="ENTREZID",
ont="MF",
pvalueCutoff=0.5,
pAdjustMethod="BH",
qvalueCutoff=0.5)
dotplot(MF)
barplot(MF)
kegg <- enrichKEGG(transID$ENTREZID, organism="hsa", pvalueCutoff=0.5, pAdjustMethod="BH", qvalueCutoff=0.5)
dotplot(kegg, showCategory=12, font.size=8, title="KEGG")
kegg <- enrichKEGG(transID$ENTREZID, organism="hsa", pvalueCutoff=0.5, pAdjustMethod="BH", qvalueCutoff=0.5)
kegg <- enrichKEGG(transID$ENTREZID, organism="hsa", pvalueCutoff=0.5, pAdjustMethod="BH", qvalueCutoff=0.5)
dotplot(kegg, showCategory=12, font.size=8, title="KEGG")
enrichDO(gene =transID$ENTREZID,ont="DO",
pvalueCutoff = 0.5,
qvalueCutoff = 0.5)
DO = enrichDO()
wbclust = read.csv("/ClusteringAnalysis/Practical-Machine-Learning-Cookbook/Chapter03/Data/WBClust2013.csv")
wbclust = read.csv("ClusteringAnalysis/Practical-Machine-Learning-Cookbook/Chapter03/Data/WBClust2013.csv")
head(wbclust)
#转换数据
# 中心化变量和创建z值是两个常见的用于归一化数据的数据分析手段。上面提到的数值型变量需要创建z值。
# scale() 函数是一个通用的函数，其默认方法中心化并比例缩放一个数值化矩阵的列。
# 数据框wbclust被传给该比例函数。只有数据框中数值化的变量会被缩放。结果存储在wbnorm数据框中
wbnorm = scale(wbclust[,2:13])
wbnorm
View(wbnorm)
rawnames()
rawnames
rownames
rownames()
# 所有的数据框都有rownames属性。rownames()函数用来获取或设置矩阵类变量的行名和列名。
# 数据框wbclust以及第一列被传递给rownames()函数。
rownames(wbnorm) = wbclust[,1]
rownames(wbnorm)
# 4
dist1 <- dist(wbnorm,method="euclidean")
cluster1 <- hclust(dist1,method = "ward.D")
cluster1
plot(cluster1, labels= wbclust$Country,cex=0.7,xlab="",ylab="Distance", main="Clustering for 80 most populous Countries")
rect.hclust(clust1,k=5)
rect.hclust(cluster1,k=5)
rect.hclust(cluster1,k=6)
plot(cluster1, labels= wbclust$Country,cex=0.7,
xlab="",ylab="Distance", main="Clustering for 80 Most Populous Countries")
rect.hclust(cluster1,k=2)
plot(cluster1, labels= wbclust$Country,cex=0.7,
xlab="",ylab="Distance", main="Clustering for 80 Most Populous Countries")
rect.hclust(cluster1,k=12)
plot(cluster1, labels= wbclust$Country,cex=0.7,
xlab="",ylab="Distance", main="Clustering for 80 Most Populous Countries")
rect.hclust(cluster1,k=5)
cuts = cutree(cluster1,k=5)
cuts
for (i in 1:5){
print(paste("Countries in Cluster ",i))
print(wbclust$Country[cuts==i])
print(" ")
}
View(wbclust)
head(wbclust)
wbnorm
head(wbnorm)
###############################################################
NASA = read.csv("ClusteringAnalysis/Practical-Machine-Learning-Cookbook/Chapter03/Data/NASAUnderstory.csv")
View(NASA)
NASA.lab = NASA$Labels
NASA.lab
###############################################################
NASA = read.csv("ClusteringAnalysis/Practical-Machine-Learning-Cookbook/Chapter03/Data/NASAUnderstory.csv",header = T)
NASA.lab = NASA$Labels
NASA.lab
NASA = NASA[,-32]
head(NASA)
NASA
NASA
NASAscale
NASAscale <- scale(NASA[,3:31])
NASAscale
rownames(NASAscale) = as.factor(NASA$Overstory.Species)
rownames(NASAscale)
dist1 <- dist(NASAscale, method = "euclidean")
clust1 <- hclust(dist1,method = "ward.D")
clust1
plot(clust1,labels=NASA[,2], cex=0.5,
xlab="",ylab="Distance",main="Clustering for NASA Understory Data")
plot(clust1,labels=NASA[,2], cex=0.5,
xlab=" ",ylab="Distance",main="Clustering for NASA Understory Data")
plot(clust1,labels=NASA[,2],
xlab=" ",ylab="Distance",main="Clustering for NASA Understory Data")
plot(clust1,labels=NASA[,2],cex=0.5
xlab=" ",ylab="Distance",main="Clustering for NASA Understory Data")
plot(clust1,labels=NASA[,2],cex=0.5,
xlab=" ",ylab="Distance",main="Clustering for NASA Understory Data")
####################
rect.hclust(clust1,k=2)
plot(clust1)
####################
rect.hclust(clust1,k=2)
plot(clust1,labels=NASA[,2],cex=0.5,
xlab=" ",ylab="Distance",main="Clustering for NASA Understory Data")
####################
rect.hclust(clust1,k=2)
cuts = cutree(clust1,k=2)
cuts
########################gaijin mo xing
library(vegan)
install.packages("vegan")
########################gaijin mo xing
library(vegan)
dist1 <- vegdist(NASA[,3:31],method="jaccard", upper=T)
clust1 <- hclust(dist1,method = "ward.D")
clust1
plot(clust1,labels=NASA[,2],cex=0.5,
xlab=" ",ylab="Distance",main="Clustering for NASA Understory Data")
rect.hclust(clust1,k=2)
cuts = cutree(clust1,k=2)
cuts
clusplot(NASAscale)
clusplot(NASA)
?clusplot()
clusplot(cuts)
clusplot(clust1)
clusplot(NASAscale)
clusplot(NASAscale)
clusplot(pam(NASAscale,2))
clusplot(pam(NASAs,2))
clusplot(NASA,cuts,color = TRUE,shade = TRUE, labels = 2,lines = 0,
main = "NASA Two Cluster Plot, Ward's Method, First two PC")
library(fpc)
install.packages("fpc")
NASAtrans=t(NASAscale)
dist1 <- dist(NASAtrans, method="minkowski",p=3)
clust1 <- hclust(dist1,method="ward.D")
clust1
plot(clust1, labels=NASA.lab[1:29], cex=1,
xlab="",ylab="Distance",main="Clustering for NASA Understory Data")
rect.hclust(clust1,k=3)
cuts = cutree(clust1,k=3)
cuts
#############################
library(RColorBrewer)
library(cluster)
library(pvclust)
install.packages("pvclust")
library(xtable)
library(pvclust)
library(plyr)
GSE4051_data = read.csv("ClusteringAnalysis/Practical-Machine-Learning-Cookbook/Chapter03/Data/GSE4051_data.csv",header = T)
str(GSE4051_data,max.level = 0)
GSE4051_design = read.csv("ClusteringAnalysis/Practical-Machine-Learning-Cookbook/Chapter03/Data/GSE4051_design.csv",header = T)
str(GSE4051_design)
trans_GSE4051_data <- t(scale(t(GSE4051_data)))
str(trans_GSE4051_data,max.level=0, give.attr = FALSE)
round(data.frame(avgBefore = rowMeans(head(GSE4051_data)),
avgAfter = rowMeans(head(trans_GSE4051_data)),
varBefore = apply(head(GSE4051_data),1,var),
varAfter = apply(head(trans_GSE4051_data),1,var)),2)
?round()
trans_GSE4051_data
pair_dist_GSE4051_data <- dist(t(trans_GSE4051_data),method = "euclidean")
GSE4051_design$group <- with(GSE4051_design,interaction(gType,devStage))
GSE4051_design
summary(GSE4051_design$group)
pr.hc.single <- hclust(pair_dist_GSE4051_data,method = "single")
pr.hc.single
pr.hc.complete <- hclust(pair_dist_GSE4051_data,method = "complete")
pr.hc.complete
pr.hc.average <- hclust(pair_dist_GSE4051_data,method = "average")
pr.hc.average
pr.hc.ward <- hclust(pair_dist_GSE4051_data,method = "ward.D2")
pr.hc.ward
plot(pr.hc.single,labels=False, main="Single Linkage Representation", xlab="")
plot(pr.hc.single,labels=FALSE, main="Single Linkage Representation", xlab="")
plot(pr.hc.complete, labels=FALSE, main="complete Linkage Representation", xlab="")
plot(pr.hc.complete,labels=FALSE, main="Complete Linkage Representation", xlab="")
plot(pr.hc.average,  labels=FALSE, main="Arverage Linkage Representation", xlab="")
plot(pr.hc.ward, labels=FALSE, main="Ward Linkage Representation", xlab="")
par(op)
op <- par(mar=c(1,4,4,1))
par(op)
op
plot(pr.hc.single, labels = GSE4051_design$group, cex = 0.6, main = "Single Hierarchical Cluster - 10 clusters")
rect.hclust(clust1,k=5)
#############################
library(RColorBrewer)
library(cluster)
library(pvclust)
library(xtable)
library(plyr)
GSE4051_data = read.csv("ClusteringAnalysis/Practical-Machine-Learning-Cookbook/Chapter03/Data/GSE4051_data.csv",header = T)
str(GSE4051_data,max.level = 0)
GSE4051_design = read.csv("ClusteringAnalysis/Practical-Machine-Learning-Cookbook/Chapter03/Data/GSE4051_design.csv",header = T)
str(GSE4051_design)
trans_GSE4051_data <- t(scale(t(GSE4051_data)))
str(trans_GSE4051_data,max.level=0, give.attr = FALSE)
round(data.frame(avgBefore = rowMeans(head(GSE4051_data)),
avgAfter = rowMeans(head(trans_GSE4051_data)),
varBefore = apply(head(GSE4051_data),1,var),
varAfter = apply(head(trans_GSE4051_data),1,var)),2)
pair_dist_GSE4051_data <- dist(t(trans_GSE4051_data),method = "euclidean")
GSE4051_design$group <- with(GSE4051_design,interaction(gType,devStage))
summary(GSE4051_design$group)
pr.hc.single <- hclust(pair_dist_GSE4051_data,method = "single")
pr.hc.single
pr.hc.complete <- hclust(pair_dist_GSE4051_data,method = "complete")
pr.hc.complete
pr.hc.average <- hclust(pair_dist_GSE4051_data,method = "average")
pr.hc.average
pr.hc.ward <- hclust(pair_dist_GSE4051_data,method = "ward.D2")
pr.hc.ward
plot(pr.hc.single,   labels=FALSE, main="Single Linkage Representation", xlab="")
plot(pr.hc.complete,labels=FALSE, main="Complete Linkage Representation", xlab="")
plot(pr.hc.average, labels=FALSE, main="Arverage Linkage Representation", xlab="")
plot(pr.hc.ward, labels=FALSE, main="Ward Linkage Representation", xlab="")
# op
plot(pr.hc.single, labels = GSE4051_design$group, cex = 0.6, main = "Single Hierarchical Cluster - 10 clusters")
rect.hclust(clust1,k=5)
rect.hclust(pr.hc.single,k=5)
# op
plot(pr.hc.single, labels = GSE4051_design$group, cex = 0.6, main = "Single Hierarchical Cluster - 10 clusters")
rect.hclust(pr.hc.single,k=10)
par(op)
op <- par(mar=c(1,4,4,1))
par(op)
jGraysFun <- colorRampPalette(brewer.pal(n=9, "Blues"))
gTypeCols <- brewer.pal(9,"Spectral")[c(4,7)]
heatmap(as.matrix(trans_GSE4051_data),Rowv = NA, col = jGraysFun(256),
hclustfun = function(x) hclust(x, method = 'single'),
scale = "none", labCol = GSE4051_design$group, labRow = NA, margins = c(8,1),
ColSideColors = gTypeCols[unclass(GSE4051_design$gType)])
legend("topright",legend=levels(GSE4051_design$gType),col = gTypeCols,
lty = 1, lwd = 5, cex = 0.5)
#######################
plot(pr.hc.complete, labels = GSE4051_design$group, cex = 0.6, main = "Complete Hierarchical Cluster - 10 clusters")
rect.hclust(pr.hc.complete,k=10)
par(op)
jGraysFun <- colorRampPalette(brewer.pal(n=9, "Greens"))
gTypeCols <- brewer.pal(11,"PRGn")[c(4,7)]
heatmap(as.matrix(trans_GSE4051_data),Rowv = NA, col = jGraysFun(256),
hclustfun = function(x) hclust(x, method = 'complete'),
scale = "none", labCol = GSE4051_design$group, labRow = NA, margins = c(8,1),
ColSideColors = gTypeCols[unclass(GSE4051_design$gType)])
legend("topright",legend=levels(GSE4051_design$gType),col = gTypeCols,
lty = 1, lwd = 5, cex = 0.5)
#######################
plot(pr.hc.complete, labels = GSE4051_design$group, cex = 0.6, main = "Complete Hierarchical Cluster - 10 clusters")
rect.hclust(pr.hc.complete,k=10)
########################
plot(pr.hc.average, labels = GSE4051_design$group, cex = 0.6, main = "Average Hierarchical Cluster - 10 clusters")
rect.hclust(pr.hc.average, k=10)
#########################
plot(pr.hc.ward, labels = GSE4051_design$group, cex = 0.6, main = "Ward Hierarchical Cluster - 10 clusters")
rect.hclust(pr.hc.ward,k=10)
jGraysFun <- colorRampPalette(brewer.pal(n=9, "Oranges"))
gTypeCols <- brewer.pal(9,"Oranges")[c(4,7)]
heatmap(as.matrix(trans_GSE4051_data),Rowv = NA, col = jGraysFun(256),
hclustfun = function(x) hclust(x, method = 'average'),
scale = "none", labCol = GSE4051_design$group, labRow = NA, margins = c(8,1),
ColSideColors = gTypeCols[unclass(GSE4051_design$gType)])
legend("topright",legend=levels(GSE4051_design$gType),col = gTypeCols,
lty = 1, lwd = 5, cex = 0.5)
jGraysFun <- colorRampPalette(brewer.pal(n=9, "Reds"))
gTypeCols <- brewer.pal(9,"Reds")[c(4,7)]
heatmap(as.matrix(trans_GSE4051_data),Rowv = NA, col = jGraysFun(256),
hclustfun = function(x) hclust(x, method = 'ward.D2'),
scale = "none", labCol = GSE4051_design$group, labRow = NA, margins = c(8,1),
ColSideColors = gTypeCols[unclass(GSE4051_design$gType)])
legend("topright",legend=levels(GSE4051_design$gType),col = gTypeCols,
lty = 1, lwd = 5, cex = 0.5)
protein = read.csv("ClusteringAnalysis/Practical-Machine-Learning-Cookbook/Chapter03/Data/protein.csv",header = T)
protein = read.csv("ClusteringAnalysis/Practical-Machine-Learning-Cookbook/Chapter03/Data/Europenaprotein.csv",header = T)
head(protein)
set.seed(123456789)
groupMeat <- kmeans(protein[,c("WhiteMeat","RedMeat")], centers = 3,nstart = 10)
groupMeat
o = order(groupMeat$cluster)
data.frame(protein$Country[o],groupMeat$cluster[o])
plot(protein$RedMeat,protein$WhiteMeat, type="n", xlim=c(3,19), xlab="Red Meat",ylab="White Meat")
text(x=protein$RedMeat,y=protein$WhiteMeat, labels = protein$Country,col=groupMeat$cluster+1)
groupProtein <- kmeans(protein[,-1], centers = 7, nstart = 10)
o=order(groupProtein$cluster)
data.frame(protein$Country[0], groupProtein$cluster[o])
data.frame(protein$Country[o], groupProtein$cluster[o])
clusplot(protein[,-1], groupProtein$cluster, main='2D representation of the Cluster solution',
color=TRUE, shade = TRUE, labels = 2, lines = 0)
foodagg= agnes(protein, diss=FALSE,metric="euclidean")
foodagg
plot(foodagg,main='Dendrogram')
groups <- cutree(foodagg, k=4)
groups <- cutree(foodagg, k=4)
groups
rect.hclust(foodagg, k=4,border="red")
foodagg= agnes(protein, diss=FALSE,metric="euclidean")
foodagg
plot(foodagg,main='Dendrogram')
groups <- cutree(foodagg, k=4)
groups
rect.hclust(foodagg, k=4,border="red")
#######################################################
food.energycontent <- read.table("ClusteringAnalysis/Practical-Machine-Learning-Cookbook/Chapter03/Data/foodstuffs.txt",header = T)
head(food.energycontent)
str(food.energycontent)
standard.deviation <- apply(food.energycontent[,-1], 2, sd)
standard.deviation
foodergy.stddev <- sweep(food.energycontent[,-1], 2, standard.deviation, FUN = "/")
foodergycnt.stddev <- sweep(food.energycontent[,-1], 2, standard.deviation, FUN = "/")
foodergycnt.stddev
food.5cluster <- kmeans(foodergycnt.stddev, centers = 5, iter.max = 100, nstart = 25)
food.5cluster
food.4cluster <- kmeans(foodergycnt.stddev, centers = 4, iter.max = 100, nstart = 25)
food.4cluster
food.4cluster$cluster
food.4cluster.clust <- lapply(1:4, function(nc)
protein[food.4cluster$cluster==nc])
food.4cluster.clust <- lapply(1:4, function(nc) protein[food.4cluster$cluster==nc])
food.4cluster.clust
food.4cluster.clust <- lapply(1:4, function(nc) protein[food.4cluster$cluster==nc])
food.4cluster.clust <- lapply(1:4, function(nc) protein[food.4cluster$cluster==nc])
food.4cluster$cluster
food.4cluster.clust <- lapply(1:4, function(nc) food.energycontent[food.4cluster$cluster==nc])
food.4cluster$cluster
protein
food.4cluster.clust <- lapply(1:4, function(nc) food.energycontent[food.4cluster$cluster==nc])
food.energycontent
#######################################################
food.energycontent <- read.table("ClusteringAnalysis/Practical-Machine-Learning-Cookbook/Chapter03/Data/foodstuffs.txt",header = T)
head(food.energycontent)
str(food.energycontent)
standard.deviation <- apply(food.energycontent[,-1], 2, sd)
standard.deviation
foodergycnt.stddev <- sweep(food.energycontent[,-1], 2, standard.deviation, FUN = "/")
foodergycnt.stddev
food.5cluster <- kmeans(foodergycnt.stddev, centers = 5, iter.max = 100, nstart = 25)
food.5cluster
food.4cluster <- kmeans(foodergycnt.stddev, centers = 4, iter.max = 100, nstart = 25)
food.4cluster
food.4cluster$cluster
food.4cluster.clust <- lapply(1:4, function(nc) food.energycontent[food.4cluster$cluster==nc])
food.4cluster.clust <- lapply(1:4, function(nc) protein[food.4cluster$cluster==nc])
food.4cluster.clust <- lapply(1:4, function(nc) Protein[food.4cluster$cluster==nc])
foodergycnt.stddev
food.4cluster.clust <- lapply(1:4, function(nc) foodergycnt.stddev[food.4cluster$cluster==nc])
food.4cluster.clust <- lapply(1:4, function(nc) food.4cluster[food.4cluster$cluster==nc])
food.4cluster.clust
food.4cluster.clust <- lapply(1:4, function(nc) food.energycontent[food.4cluster$cluster==nc])
food.4cluster.clust <- lapply(1:4, function(nc) food.energycontent$Food[food.4cluster$cluster==nc])
food.4cluster.clust
pairs(food.energycontent[,-1], panel=function(x,y) text(x,y,food.4cluster$cluster))
food.pc <- princomp(food.energycontent[,-1], cor = T)
my.color.vector <- rep("green", times=nrow(food.energycontent))
my.color.vector[food.4cluster$cluster==2] <- "blue"
my.color.vector[food.4cluster$cluster==3] <- "red"
my.color.vector[food.4cluster$cluster==4] <- "orange"
par(pty="s")
plot(food.pc$scores[,1], food.pc$scores[,2], ylim=range(food.pc$scores[,1]),
+ xlab="PC 1", ylab="PC 2", type = "n", lwd=2)
plot(food.pc$scores[,1], food.pc$scores[,2],
ylim=range(food.pc$scores[,1]),
+ xlab="PC 1", ylab="PC 2", type = "n", lwd=2)
plot(food.pc$scores[,1], food.pc$scores[,2],
ylim=range(food.pc$scores[,1]),
xlab="PC 1", ylab="PC 2", type = "n", lwd=2)
text(food.pc$scores[,1], food.pc$scores[,2], labels = Food,cex=0.7, lwd=2,
col = my.color.vector)
text(food.pc$scores[,1], food.pc$scores[,2], labels ="Food",cex=0.7, lwd=2,
col = my.color.vector)
text(food.pc$scores[,1], food.pc$scores[,2], labels =food.energycontent$Food,cex=0.7, lwd=2,
col = my.color.vector)
plot(food.pc$scores[,1], food.pc$scores[,2],
ylim=range(food.pc$scores[,1]),
xlab="PC 1", ylab="PC 2", type = "n", lwd=2)
text(food.pc$scores[,1], food.pc$scores[,2], labels =food.energycontent$Food,cex=0.7, lwd=2,
col = my.color.vector)
plot(food.pc$scores[,1], food.pc$scores[,2],
ylim=range(food.pc$scores[,1]),
xlab="PC 1", ylab="PC 2", type = "n", lwd=2)
text(food.pc$scores[,1], food.pc$scores[,2], labels =food.energycontent$Food,cex=0.7, lwd=2,
col = my.color.vector)
