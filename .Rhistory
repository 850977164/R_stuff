plot2 <- LabelPoints(plot = plot1, points = top10)
CombinePlots(plots = list(plot1, plot2))
all.genes <- rownames(G48E2L1)
G48E2L1 <- ScaleData(G48E2L1, features = all.genes)
G48E2L1 <- RunPCA(G48E2L1, features = VariableFeatures(object = G48E2L1))
print(G48E2L1[["pca"]], dims=1:5, nfeatures = 5)
VizDimLoadings(G48E2L1, dims = 1:2, reduction = "pca")
DimPlot(G48E2L1, reduction = "pca")
DimHeatmap(G48E2L1, dims = 1, cells = 500, balanced = TRUE)
DimHeatmap(G48E2L1, dims = 1:15, cells = 500, balanced = TRUE)
G48E2L1 <- JackStraw(G48E2L1, num.replicate = 100)
G48E2L1 <- ScoreJackStraw(G48E2L1, dims = 1:20)
JackStrawPlot(G48E2L1, dims = 1:15)
ElbowPlot(G48E2L1)
G48E2L1 <- FindNeighbors(G48E2L1, dims = 1:10)
G48E2L1 <- FindClusters(G48E2L1, resolution = 0.5)
head(Idents(G48E2L1),5)
head(Idents(G48E2L1),5)
G48E2L1 <- RunUMAP(G48E2L1, dims = 1:10)
DimPlot(G48E2L1, reduction = "umap")
cluster1.markers <- FindMarkers(G48E2L1, ident.1 = 1, min.pct = 0.25)
head(cluster1.markers, n=5)
cluster5.markers <- FindMarkers(G48E2L1, ident.1 = 5, ident.2 = c(0,3),min.pct = 0.25)
head(cluster5.markers, n=5)
G48E2L1.markers <- FindAllMarkers(G48E2L1, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
G48E2L1.markers %>% group_by(cluster) %>% top_n(n=2, wt = avg_logFC)
cluster1.markers <- FindMarkers(G48E2L1, ident.1 = 0, logfc.threshold = 0.25, test.use = "roc", only.pos = TRUE)
VlnPlot(G48E2L1, features = c("MS4A1", "CD79A"))
VlnPlot(G48E2L1, features = c("NKG7", "PF4"),slot = "counts", log = TRUE)
FeaturePlot(G48E2L1, features = c("MS4A1", "GNLY", "CD3E", "CD14", "FCER1A", "FCGR3A", "LYZ", "PPBP", "CD8A"))
top10 <- G48E2L1.markers %>% group_by(cluster) %>% top_n(n=10, wt = avg_logFC)
DoHeatmap(G48E2L1, features = top10$gene) + NoLegend()
new.cluster.ids <- c("Naive CD4 T", "Memory CD4 T", "CD14+ Mono", "B", "CD8 T", "FCGR3A+ Mono", "NK", "DC","Platelet")
names(new.cluster.ids) <- levels(G48E2L1)
G48E2L1 <- RenameIdents(G48E2L1, new.cluster.ids)
DimPlot(G48E2L1, reduction = "umap", label = TRUE, pt.size = 0.5) + NoLegend()
G48E2L1[["RNA"]]@data
library(Seurat)
library(dplyr)
# load pbmc data
real_10x_data = Read10X(data.dir = "G:\\projects\\R_stuff\\10xGenomics\\example_G48E2L1\\filtered_feature_bc_matrix")
G48E2L1 <-CreateSeuratObject(counts = real_10x_data, project = "G48E2L1",)
head(G48E2L1@meta.data,5)
summary(G48E2L1@meta.data)
head(G48E2L1@meta.data[,c("nCount_RNA","nFeature_RNA")],5)
G48E2L1_k = kmeans(G48E2L1@meta.data[,c("nCount_RNA","nFeature_RNA")])
G48E2L1_k = kmeans(as.matrix(G48E2L1@meta.data[,c("nCount_RNA","nFeature_RNA")]))
G48E2L1_k = kmeans(as.matrix(G48E2L1@meta.data[-1,c("nCount_RNA","nFeature_RNA")]))
G48E2L1_matrix = as.matrix(G48E2L1@meta.data[,c("nCount_RNA","nFeature_RNA")])
G48E2L1_matrix
G48E2L1_k = kmeans(G48E2L1_matrix,centers = 10,nstart = 10)
G48E2L1_k
G48E2L1_k$centers
plot(G48E2L1_matrix, col=G48E2L1_k$cluster)
plot(G48E2L1_matrix["nCount_RNA"], col=G48E2L1_k$cluster)
plot(G48E2L1_matrix["nCount_RNA"], col=G48E2L1_k$cluster)
plot(G48E2L1_matrix[c("nCount_RNA","nFeature_RNA")], col=G48E2L1_k$cluster)
G48E2L1_k = kmeans(G48E2L1_matrix,centers = 10,nstart = 10)
G48E2L1_k$centers
plot(G48E2L1_matrix[c("nCount_RNA","nFeature_RNA")], col=G48E2L1_k$cluster)
plot(G48E2L1_matrix, col=G48E2L1_k$cluster)
summary(G48E2L1@meta.data)
library(Seurat)
library(dplyr)
# load pbmc data
real_10x_data = Read10X(data.dir = "G:\\projects\\R_stuff\\10xGenomics\\example_G48E2L1\\filtered_feature_bc_matrix")
G48E2L1 <-CreateSeuratObject(counts = real_10x_data, project = "G48E2L1",)
head(G48E2L1@meta.data[,c("nCount_RNA","nFeature_RNA")],5)
summary(G48E2L1@meta.data)
G48E2L1 <- NormalizeData(G48E2L1, normalization.method = "LogNormalize", scale.factor = 10000)
G48E2L1_matrix = as.matrix(G48E2L1@meta.data[,c("nCount_RNA","nFeature_RNA")])
G48E2L1_matrix
G48E2L1 <- NormalizeData(G48E2L1@meta.data, normalization.method = "LogNormalize", scale.factor = 10000)
G48E2L1 <- NormalizeData(G48E2L1, normalization.method = "LogNormalize", scale.factor = 10000)
head(G48E2L1@meta.data[,c("nCount_RNA","nFeature_RNA")],5)
# load pbmc data
real_10x_data = Read10X(data.dir = "G:\\projects\\R_stuff\\10xGenomics\\example_G48E2L1\\filtered_feature_bc_matrix")
G48E2L1 <-CreateSeuratObject(counts = real_10x_data, project = "G48E2L1",)
head(G48E2L1@meta.data[,c("nCount_RNA","nFeature_RNA")],5)
G48E2L1 <- NormalizeData(G48E2L1, normalization.method = "LogNormalize", scale.factor = 10000)
G48E2L1@meta.data
G48E2L1_matrix = as.matrix(G48E2L1@meta.data[,c("nCount_RNA","nFeature_RNA")])
G48E2L1_matrix
G48E2L1_matrix_scale = scale(G48E2L1_matrix)
G48E2L1_matrix
?VlnPlot()
VlnPlot(G48E2L1, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(G48E2L1, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(G48E2L1, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
CombinePlots(plots = list(plot1, plot2))
G48E2L1 <- NormalizeData(G48E2L1, normalization.method = "LogNormalize", scale.factor = 10000)
G48E2L1[["RNA"]]@data
G48E2L1 <- FindVariableFeatures(G48E2L1, selection.method = "vst", nfeatures = 2000)
top10 <- head(VariableFeatures(G48E2L1),10)
plot1 <- VariableFeaturePlot(G48E2L1)
plot2 <- LabelPoints(plot = plot1, points = top10)
CombinePlots(plots = list(plot1, plot2))
all.genes <- rownames(G48E2L1)
G48E2L1 <- ScaleData(G48E2L1, features = all.genes)
G48E2L1 <- RunPCA(G48E2L1, features = VariableFeatures(object = G48E2L1))
print(G48E2L1[["pca"]], dims=1:5, nfeatures = 5)
VizDimLoadings(G48E2L1, dims = 1:2, reduction = "pca")
DimPlot(G48E2L1, reduction = "pca")
DimHeatmap(G48E2L1, dims = 1, cells = 500, balanced = TRUE)
DimHeatmap(G48E2L1, dims = 1:15, cells = 500, balanced = TRUE)
G48E2L1 <- JackStraw(G48E2L1, num.replicate = 100)
?cutree()
"""
dense.size = object.size(as.matrix(real_10x_data))
dense.size
spare.size <- object.size(real_10x_data)
spare.size
dense.size/spare.size
G48E2L1[["percent.mt"]] <- PercentageFeatureSet(G48E2L1, pattern = "^MT-")
"""
G48E2L1[["percent.mt"]] <- PercentageFeatureSet(G48E2L1, pattern = "^MT-")
G48E2L1[["percent.mt"]] <- PercentageFeatureSet(G48E2L1, pattern = "^MT-")
summary(G48E2L1@meta.data)
head(G48E2L1@meta.data)
colSums(G48E2L1@meta.data)
colSums(G48E2L1@meta.data[,c("nCount_RNA","nFeature_RNA","percent.mt")])
library(ggplot2)
ggplot(G48E2L1@meta.data, aes(x=nCount_RNA)) + geom_histogram()
summary(G48E2L1@meta.data)
colSums(G48E2L1@meta.data[,c("nCount_RNA","nFeature_RNA","percent.mt")])
head(G48E2L1@meta.data)
G48E2L1[["RNA"]]@data
G48E2L1[["RNA"]]@data[c("CD4")]
G48E2L1[["RNA"]]@counts
dense.size = object.size(as.matrix(real_10x_data))
real_10x_data[c("CD4", "CD8A"),1:30]
real_10x_data[c("CD4", "CD8A","CD8B"),1:30]
real_10x_data[c("CD4", "CD8A","CD8B")]
real_10x_data[c("CD4", "CD8A","CD8B"),]
real_10x_data[c("CD4", "CD8A","CD8B","CD3"),]
G48E2L1[["RNA"]]@scale.data
G48E2L1[["RNA"]]@key
G48E2L1[["RNA"]]@var.features
length(G48E2L1[["RNA"]]@var.features)
# only 2000?
G48E2L1[["RNA"]]@meta.features
G48E2L1[["RNA"]]@misc
G48E2L1[["RNA"]]@data
G48E2L1[["RNA"]]@data[c("CD4"),]
G48E2L1[["RNA"]]@data[c("CD4"),]
G48E2L1 <- RunUMAP(G48E2L1, dims = 1:10)
FeaturePlot(G48E2L1, features = c("HIST1H4C","GIMAP7","CTSL","GZMB","CCL5","HIST1H2AI","TNFRSF4","PMCH","TUBA1C","KPNA2"))
library(Seurat)
library(dplyr)
real_10x_data = Read10X(data.dir = "G:\\projects\\R_stuff\\10xGenomics\\example_G48E2L1\\filtered_feature_bc_matrix")
G48E2L1 <-CreateSeuratObject(counts = real_10x_data, project = "G48E2L1",)
# mt
G48E2L1[["percent.mt"]] <- PercentageFeatureSet(G48E2L1, pattern = "^MT-")
VlnPlot(G48E2L1, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(G48E2L1, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(G48E2L1, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
CombinePlots(plots = list(plot1, plot2))
G48E2L1 <- subset(G48E2L1, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
## normalizing
G48E2L1 <- NormalizeData(G48E2L1, normalization.method = "LogNormalize", scale.factor = 10000)
## identification of highly variable features(feature selection)
G48E2L1 <- FindVariableFeatures(G48E2L1, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(G48E2L1), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(G48E2L1)
plot2 <- LabelPoints(plot = plot1, points = top10)
CombinePlots(plots = list(plot1, plot2))
## Scaling the data
all.genes <- rownames(G48E2L1)
G48E2L1 <- ScaleData(G48E2L1, features = all.genes)
## linear dimensional reduction (PCA)
G48E2L1 <- RunPCA(G48E2L1, features = VariableFeatures(object = G48E2L1))
DimPlot(G48E2L1, reduction="pca")
## Cluster the cells
G48E2L1 <- FindNeighbors(G48E2L1, dims = 1:10)
G48E2L1 <- FindClusters(G48E2L1, resolution = 0.5)
# ??FindNeighbors()
## non-linear dimensional reduction(UMAP/tSNE)
G48E2L1 <- RunUMAP(G48E2L1,dims = 1:10)
DimPlot(G48E2L1, reduction = "umap",label = TRUE)
## Finding differentially expressed features (cluster biomarkers)
cluster1.markers <- FindMarkers(G48E2L1, ident.1 = 1, min.pct = 0.25)
G48E2L1.markers <- FindAllMarkers(G48E2L1, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
G48E2L1.markers %>% group_by(cluster) %>% top_n(n=2, wt = avg_logFC)
VlnPlot(G48E2L1, features = c("HIST1H4C","GIMAP7","CTSL","GZMB","CCL5","HIST1H2AI","TNFRSF4","PMCH","TUBA1C","KPNA2"))
VlnPlot(G48E2L1, features = c("HIST1H4C","HIST1H1B","GIMAP7","CTSL","GZMB","CCL5","HIST1H1E","HIST1H2AI","TNFRSF4","PMCH","TUBA1C","KPNA2"))
FeaturePlot(G48E2L1, features = c("HIST1H4C","HIST1H1B","GIMAP7","CTSL","GZMB","CCL5","HIST1H1E","HIST1H2AI","TNFRSF4","PMCH","TUBA1C","KPNA2"))
FeaturePlot(G48E2L1, features = c("CD4","CD8A","CD8B"))
DimPlot(G48E2L1, reduction = "umap", label = TRUE, pt.size = 0.5) + NoLegend()
G48E2L1.markers$cluster ==0
which(G48E2L1.markers$cluster ==0)
G48E2L1.markers[,cluster ==0]
G48E2L1.markers[,cluster==0]
select(G48E2L1.markers,cluster==0)
select(G48E2L1.markers,G48E2L1.markers$cluster==0)
select(G48E2L1.markers)
G48E2L1.markers
select(G48E2L1.markers,p_val,gene)
select(G48E2L1.markers,p_val,gene=="EIF3G")
select(G48E2L1.markers,p_val,gene)
filter(G48E2L1.markers)
filter(G48E2L1.markers,cluster==0)
filter(G48E2L1.markers,cluster==1)
filter(G48E2L1.markers,cluster==2)
filter(G48E2L1.markers,cluster==3)
filter(G48E2L1.markers,cluster==4)
filter(G48E2L1.markers,cluster==5)
filter(G48E2L1.markers,cluster==5)
getOption("max.print"=999)
getOption(max.print=999)
??getOption()
setOption(max.print=999)
filter(G48E2L1.markers,cluster==5)
option(max.print=999)
options(max.print=999)
filter(G48E2L1.markers,cluster==5)
options(max.print=10000)
filter(G48E2L1.markers,cluster==5)
summary(G48E2L1.markers)
G48E2L1.markers %>% group_by(cluster) %>% top_n(n=2, wt = avg_logFC)
library(Seurat)
library(dplyr)
real_10x_data = Read10X(data.dir = "G:\\projects\\R_stuff\\10xGenomics\\example_G48E2L1\\filtered_feature_bc_matrix")
G48E2L1 <-CreateSeuratObject(counts = real_10x_data, project = "G48E2L1",)
# mt
G48E2L1[["percent.mt"]] <- PercentageFeatureSet(G48E2L1, pattern = "^MT-")
VlnPlot(G48E2L1, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(G48E2L1, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(G48E2L1, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
CombinePlots(plots = list(plot1, plot2))
G48E2L1 <- subset(G48E2L1, subset = percent.mt < 5)
## normalizing
G48E2L1 <- NormalizeData(G48E2L1, normalization.method = "LogNormalize", scale.factor = 10000)
## identification of highly variable features(feature selection)
G48E2L1 <- FindVariableFeatures(G48E2L1, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(G48E2L1), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(G48E2L1)
plot2 <- LabelPoints(plot = plot1, points = top10)
CombinePlots(plots = list(plot1, plot2))
## Scaling the data
all.genes <- rownames(G48E2L1)
G48E2L1 <- ScaleData(G48E2L1, features = all.genes)
## linear dimensional reduction (PCA)
G48E2L1 <- RunPCA(G48E2L1, features = VariableFeatures(object = G48E2L1))
DimPlot(G48E2L1, reduction="pca")
## Cluster the cells
G48E2L1 <- FindNeighbors(G48E2L1, dims = 1:5)
G48E2L1 <- FindClusters(G48E2L1, resolution = 0.5)
# ??FindNeighbors()
## non-linear dimensional reduction(UMAP/tSNE)
G48E2L1 <- RunUMAP(G48E2L1,dims = 1:5)
DimPlot(G48E2L1, reduction = "umap",label = TRUE)
# ??FindNeighbors()
## non-linear dimensional reduction(UMAP/tSNE)
G48E2L1 <- RunUMAP(G48E2L1,dims = 1:10)
DimPlot(G48E2L1, reduction = "umap",label = TRUE)
## identification of highly variable features(feature selection)
# G48E2L1 <- FindVariableFeatures(G48E2L1, selection.method = "vst", nfeatures = 2000)
G48E2L1 <- FindVariableFeatures(G48E2L1, selection.method = "vst")
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(G48E2L1), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(G48E2L1)
plot2 <- LabelPoints(plot = plot1, points = top10)
CombinePlots(plots = list(plot1, plot2))
## Scaling the data
all.genes <- rownames(G48E2L1)
G48E2L1 <- ScaleData(G48E2L1, features = all.genes)
## linear dimensional reduction (PCA)
G48E2L1 <- RunPCA(G48E2L1, features = VariableFeatures(object = G48E2L1))
DimPlot(G48E2L1, reduction="pca")
## Cluster the cells
G48E2L1 <- FindNeighbors(G48E2L1, dims = 1:5)
G48E2L1 <- FindClusters(G48E2L1, resolution = 0.5)
# ??FindNeighbors()
## non-linear dimensional reduction(UMAP/tSNE)
G48E2L1 <- RunUMAP(G48E2L1,dims = 1:10)
DimPlot(G48E2L1, reduction = "umap",label = TRUE)
# ??FindNeighbors()
## non-linear dimensional reduction(UMAP/tSNE)
G48E2L1 <- RunUMAP(G48E2L1,dims = 1:5)
DimPlot(G48E2L1, reduction = "umap",label = TRUE)
# ??FindNeighbors()
## non-linear dimensional reduction(UMAP/tSNE)
G48E2L1 <- RunUMAP(G48E2L1,dims = 1)
# ??FindNeighbors()
## non-linear dimensional reduction(UMAP/tSNE)
G48E2L1 <- RunUMAP(G48E2L1,dims = 1:2)
DimPlot(G48E2L1, reduction = "umap",label = TRUE)
# ??FindNeighbors()
## non-linear dimensional reduction(UMAP/tSNE)
G48E2L1 <- RunUMAP(G48E2L1,dims = 2:3)
DimPlot(G48E2L1, reduction = "umap",label = TRUE)
# ??FindNeighbors()
## non-linear dimensional reduction(UMAP/tSNE)
G48E2L1 <- RunUMAP(G48E2L1,dims = 2:4)
DimPlot(G48E2L1, reduction = "umap",label = TRUE)
# ??FindNeighbors()
## non-linear dimensional reduction(UMAP/tSNE)
G48E2L1 <- RunUMAP(G48E2L1,dims = 1:10)
DimPlot(G48E2L1, reduction = "umap",label = TRUE)
# ??FindNeighbors()
## non-linear dimensional reduction(UMAP/tSNE)
G48E2L1 <- RunUMAP(G48E2L1,dims = 1:11)
DimPlot(G48E2L1, reduction = "umap",label = TRUE)
## Cluster the cells
G48E2L1 <- FindNeighbors(G48E2L1, dims = 1:10)
G48E2L1 <- FindClusters(G48E2L1, resolution = 0.5)
# ??FindNeighbors()
## non-linear dimensional reduction(UMAP/tSNE)
G48E2L1 <- RunUMAP(G48E2L1,dims = 1:11)
DimPlot(G48E2L1, reduction = "umap",label = TRUE)
# ??FindNeighbors()
## non-linear dimensional reduction(UMAP/tSNE)
G48E2L1 <- RunUMAP(G48E2L1,dims = 1:10)
DimPlot(G48E2L1, reduction = "umap",label = TRUE)
G48E2L1.markers <- FindAllMarkers(G48E2L1, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
G48E2L1.markers %>% group_by(cluster) %>% top_n(n=2, wt = avg_logFC)
FeaturePlot(G48E2L1, features = c("CD8A","NKG7","GZMB","CCL5","GIMAP7","CTSL","HIST1H4C","HIST1H1B", "CD74","HLA-DPA1","HIST1H1E","HIST1H2AI","PMCH","CSF2")
)
FeaturePlot(G48E2L1, features = c("CD4","CD8A","CD8B"))
library(Seurat)
library(dplyr)
real_10x_data = Read10X(data.dir = "G:\\projects\\R_stuff\\10xGenomics\\example_G48E2L1\\filtered_feature_bc_matrix")
G48E2L1 <-CreateSeuratObject(counts = real_10x_data, project = "G48E2L1",)
# mt
G48E2L1[["percent.mt"]] <- PercentageFeatureSet(G48E2L1, pattern = "^MT-")
VlnPlot(G48E2L1, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(G48E2L1, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(G48E2L1, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
CombinePlots(plots = list(plot1, plot2))
G48E2L1 <- subset(G48E2L1, subset = percent.mt < 5)
## normalizing
G48E2L1 <- NormalizeData(G48E2L1, normalization.method = "LogNormalize", scale.factor = 10000)
## identification of highly variable features(feature selection)
# G48E2L1 <- FindVariableFeatures(G48E2L1, selection.method = "vst", nfeatures = 2000)
G48E2L1 <- FindVariableFeatures(G48E2L1, selection.method = "vst")
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(G48E2L1), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(G48E2L1)
plot2 <- LabelPoints(plot = plot1, points = top10)
CombinePlots(plots = list(plot1, plot2))
## Scaling the data
all.genes <- rownames(G48E2L1)
G48E2L1 <- ScaleData(G48E2L1, features = all.genes)
## linear dimensional reduction (PCA)
G48E2L1 <- RunPCA(G48E2L1, features = VariableFeatures(object = G48E2L1))
DimPlot(G48E2L1, reduction="pca")
## Cluster the cells
G48E2L1 <- FindNeighbors(G48E2L1, dims = 1:10)
G48E2L1 <- FindClusters(G48E2L1, resolution = 0.5)
# ??FindNeighbors()
## non-linear dimensional reduction(UMAP/tSNE)
G48E2L1 <- RunUMAP(G48E2L1,dims = 1:10)
DimPlot(G48E2L1, reduction = "umap",label = TRUE)
# ??FindNeighbors()
## non-linear dimensional reduction(UMAP/tSNE)
G48E2L1 <- RunUMAP(G48E2L1,dims = 1:9)
DimPlot(G48E2L1, reduction = "umap",label = TRUE)
G48E2L1 <- RunTSNE(G48E2L1,dims = 1:10)
DimPlot(G48E2L1,reduction = "tsne",label = TRUE)
summary(G48E2L1)
G48E2L1
real_10x_data = Read10X(data.dir = "G:\\projects\\R_stuff\\10xGenomics\\example_G48E2L1\\filtered_feature_bc_matrix")
G48E2L1 <-CreateSeuratObject(counts = real_10x_data, project = "G48E2L1",)
G48E2L1
G48E2L1 <-CreateSeuratObject(counts = real_10x_data, project = "G48E2L1",min.cells = 3,min.features = 200)
G48E2L1
# mt
G48E2L1[["percent.mt"]] <- PercentageFeatureSet(G48E2L1, pattern = "^MT-")
VlnPlot(G48E2L1, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(G48E2L1, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(G48E2L1, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
CombinePlots(plots = list(plot1, plot2))
G48E2L1 <- subset(G48E2L1, subset = percent.mt < 5)
## normalizing
G48E2L1 <- NormalizeData(G48E2L1, normalization.method = "LogNormalize", scale.factor = 10000)
## identification of highly variable features(feature selection)
# G48E2L1 <- FindVariableFeatures(G48E2L1, selection.method = "vst", nfeatures = 2000)
G48E2L1 <- FindVariableFeatures(G48E2L1, selection.method = "vst")
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(G48E2L1), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(G48E2L1)
plot2 <- LabelPoints(plot = plot1, points = top10)
CombinePlots(plots = list(plot1, plot2))
## Scaling the data
all.genes <- rownames(G48E2L1)
G48E2L1 <- ScaleData(G48E2L1, features = all.genes)
## linear dimensional reduction (PCA)
G48E2L1 <- RunPCA(G48E2L1, features = VariableFeatures(object = G48E2L1))
DimPlot(G48E2L1, reduction="pca")
## Cluster the cells
G48E2L1 <- FindNeighbors(G48E2L1, dims = 1:10)
G48E2L1 <- FindClusters(G48E2L1, resolution = 0.5)
# ??FindNeighbors()
## non-linear dimensional reduction(UMAP/tSNE)
G48E2L1 <- RunUMAP(G48E2L1,dims = 1:10)
DimPlot(G48E2L1, reduction = "umap",label = TRUE)
## Finding differentially expressed features (cluster biomarkers)
??FindMarkers()
cluster1.markers <- FindMarkers(G48E2L1, ident.1 = 1)
head(cluster1.markers, n=5)
cluster1.markers <- FindMarkers(G48E2L1, ident.1 = 1, min.pct = 0.25)
head(cluster1.markers, n=5)
G48E2L1.markers <- FindAllMarkers(G48E2L1, min.pct = 0.25, logfc.threshold = 0.25)
G48E2L1.markers %>% group_by(cluster) %>% top_n(n=2, wt = avg_logFC)
FeaturePlot(G48E2L1, features = c("CD8A","NKG7","GIMAP7","CTSL","HSPD1","FABP5","HIST1H4C","HIST1H1B","GZMB","CCL5","HIST1H1E","HIST1H2AI","PMCH","CSF2"))
FeaturePlot(G48E2L1, features = c("CD4","CD8A","CD8B"))
FeaturePlot(G48E2L1, features = c("CD4","CD8A","CD8B"),label = TRUE)
??FeaturePlot()
library(Seurat)
library(dplyr)
real_10x_data = Read10X(data.dir = "G:\\projects\\R_stuff\\10xGenomics\\example_G48E2L1\\filtered_feature_bc_matrix")
G48E2L1 <-CreateSeuratObject(counts = real_10x_data, project = "G48E2L1",min.cells = 3,min.features = 200)
G48E2L1
# mt
G48E2L1[["percent.mt"]] <- PercentageFeatureSet(G48E2L1, pattern = "^MT-")
VlnPlot(G48E2L1, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(G48E2L1, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(G48E2L1, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
CombinePlots(plots = list(plot1, plot2))
G48E2L1 <- subset(G48E2L1, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
## normalizing
G48E2L1 <- NormalizeData(G48E2L1, normalization.method = "LogNormalize", scale.factor = 10000)
## identification of highly variable features(feature selection)
# G48E2L1 <- FindVariableFeatures(G48E2L1, selection.method = "vst", nfeatures = 2000)
G48E2L1 <- FindVariableFeatures(G48E2L1, selection.method = "vst")
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(G48E2L1), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(G48E2L1)
plot2 <- LabelPoints(plot = plot1, points = top10)
CombinePlots(plots = list(plot1, plot2))
## Scaling the data
all.genes <- rownames(G48E2L1)
G48E2L1 <- ScaleData(G48E2L1, features = all.genes)
## linear dimensional reduction (PCA)
G48E2L1 <- RunPCA(G48E2L1, features = VariableFeatures(object = G48E2L1))
DimPlot(G48E2L1, reduction="pca")
## Cluster the cells
G48E2L1 <- FindNeighbors(G48E2L1, dims = 1:10)
G48E2L1 <- FindClusters(G48E2L1, resolution = 0.5)
# ??FindNeighbors()
## non-linear dimensional reduction(UMAP/tSNE)
G48E2L1 <- RunUMAP(G48E2L1,dims = 1:10)
DimPlot(G48E2L1, reduction = "umap",label = TRUE)
G48E2L1 <- RunTSNE(G48E2L1,dims = 1:10)
DimPlot(G48E2L1,reduction = "tsne",label = TRUE)
G48E2L1.markers <- FindAllMarkers(G48E2L1, min.pct = 0.25, logfc.threshold = 0.25)
G48E2L1.markers %>% group_by(cluster) %>% top_n(n=2, wt = avg_logFC)
FeaturePlot(G48E2L1, features = c("HIST1H4C","UBE2C","GIMAP7","CTSL","GZMB","CCL5","HIST1H1E","HIST1H2AI","TNFRSF4","PMCH","TUBA1C","KPNA2"))
??FeaturePlot()
FeaturePlot(G48E2L1, features = c("HIST1H4C","UBE2C","GIMAP7","CTSL","GZMB","CCL5","HIST1H1E","HIST1H2AI","TNFRSF4","PMCH","TUBA1C","KPNA2"),label = TRUE)
vlnPlot(G48E2L1, features = c("HIST1H4C","UBE2C","GIMAP7","CTSL","GZMB","CCL5","HIST1H1E","HIST1H2AI","TNFRSF4","PMCH","TUBA1C","KPNA2"),label = TRUE)
VlnPlot(G48E2L1, features = c("HIST1H4C","UBE2C","GIMAP7","CTSL","GZMB","CCL5","HIST1H1E","HIST1H2AI","TNFRSF4","PMCH","TUBA1C","KPNA2"),label = TRUE)
# G48E2L1.markers
VlnPlot(G48E2L1, features = c("CD4","CD8A","CD8B"),label=TRUE)
FeaturePlot(G48E2L1, features = c("CD4","CD8A","CD8B"),label = TRUE)
FeaturePlot(G48E2L1, features = c("MS4A1", "GNLY", "CD3E", "CD14", "FCER1A", "FCGR3A", "LYZ", "PPBP", "CD8A"))
DimPlot(G48E2L1, reduction = "umap", label = TRUE, pt.size = 0.5) + NoLegend()
library(Seurat)
library(dplyr)
real_10x_data = Read10X(data.dir = "G:\\projects\\R_stuff\\10xGenomics\\example_G48E2L1\\filtered_feature_bc_matrix")
G48E2L1 <-CreateSeuratObject(counts = real_10x_data, project = "G48E2L1",min.cells = 3,min.features = 200)
G48E2L1
# mt
G48E2L1[["percent.mt"]] <- PercentageFeatureSet(G48E2L1, pattern = "^MT-")
VlnPlot(G48E2L1, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(G48E2L1, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(G48E2L1, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
CombinePlots(plots = list(plot1, plot2))
G48E2L1 <- subset(G48E2L1, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
G48E2L1
devtools::install_github('cole-trapnell-lab/leidenbase')
devtools::install_github('cole-trapnell-lab/monocle3')
devtools::install_github('cole-trapnell-lab/monocle3')
library(monocle3)
devtools::install_github('cole-trapnell-lab/monocle3')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
BiocManager::install(c('BiocGenerics', 'DelayedArray', 'DelayedMatrixStats',
'limma', 'S4Vectors', 'SingleCellExperiment',
'SummarizedExperiment', 'batchelor'))
library(monocle3)
devtools::install_github('cole-trapnell-lab/monocle3')
install.packages("batchelor")
BiocManager::install("batchelor")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
BiocManager::install(c('BiocGenerics', 'DelayedArray', 'DelayedMatrixStats',
'limma', 'S4Vectors', 'SingleCellExperiment',
'SummarizedExperiment', 'batchelor'))
install.packages("devtools")
devtools::install_github('cole-trapnell-lab/leidenbase')
devtools::install_github('cole-trapnell-lab/monocle3')
install.packages("devtools")
library(monocle3)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("batchelor")
version
install.packages("installr")
require(installr)
updateR()
updateR()
